{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../../../src/electron/common/events.ts"],"names":[],"mappings":";;AASa,QAAA,iBAAiB,GAAG,mBAAmB,CAAC;AAIxC,QAAA,yBAAyB,GAAG,2BAA2B,CAAC;AAQxD,QAAA,uBAAuB,GAAG,yBAAyB,CAAC;AAQpD,QAAA,2BAA2B,GAAG,6BAA6B,CAAC;AAU5D,QAAA,sBAAsB,GAAG,wBAAwB,CAAC;AASlD,QAAA,0BAA0B,GAAG,4BAA4B,CAAC;AAU1D,QAAA,qBAAqB,GAAG,uBAAuB,CAAC;AAUhD,QAAA,yBAAyB,GAAG,2BAA2B,CAAC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\n// in RENDERER: ipcRenderer.send()\n// in MAIN: ipcMain.on()\nexport const R2_EVENT_DEVTOOLS = \"R2_EVENT_DEVTOOLS\";\n\n// in RENDERER: ipcRenderer.send()\n// in MAIN: ipcMain.on()\nexport const R2_EVENT_OPEN_URL_OR_PATH = \"R2_EVENT_OPEN_URL_OR_PATH\";\n// tslint:disable-next-line:class-name\nexport interface IEventPayload_R2_EVENT_OPEN_URL_OR_PATH {\n    urlOrPath: string;\n}\n\n// in RENDERER: ipcRenderer.send()\n// in MAIN: ipcMain.on()\nexport const R2_EVENT_LCP_LSD_RETURN = \"R2_EVENT_LCP_LSD_RETURN\";\n// tslint:disable-next-line:class-name\nexport interface IEventPayload_R2_EVENT_LCP_LSD_RETURN {\n    publicationFilePath: string;\n}\n\n// in MAIN: event.sender.send(), where event is from the above ipcMain.on()\n// in RENDERER: ipcRenderer.on()\nexport const R2_EVENT_LCP_LSD_RETURN_RES = \"R2_EVENT_LCP_LSD_RETURN_RES\";\n// tslint:disable-next-line:class-name\nexport interface IEventPayload_R2_EVENT_LCP_LSD_RETURN_RES {\n    okay: boolean;\n    error: string | undefined;\n    lsdJson: any | undefined;\n}\n\n// in RENDERER: ipcRenderer.send()\n// in MAIN: ipcMain.on()\nexport const R2_EVENT_LCP_LSD_RENEW = \"R2_EVENT_LCP_LSD_RENEW\";\n// tslint:disable-next-line:class-name\nexport interface IEventPayload_R2_EVENT_LCP_LSD_RENEW {\n    publicationFilePath: string;\n    endDateStr: string | undefined;\n}\n\n// in MAIN: event.sender.send(), where event is from the above ipcMain.on()\n// in RENDERER: ipcRenderer.on()\nexport const R2_EVENT_LCP_LSD_RENEW_RES = \"R2_EVENT_LCP_LSD_RENEW_RES\";\n// tslint:disable-next-line:class-name\nexport interface IEventPayload_R2_EVENT_LCP_LSD_RENEW_RES {\n    okay: boolean;\n    error: string | undefined;\n    lsdJson: any | undefined;\n}\n\n// in RENDERER: ipcRenderer.send()\n// in MAIN: ipcMain.on()\nexport const R2_EVENT_TRY_LCP_PASS = \"R2_EVENT_TRY_LCP_PASS\";\n// tslint:disable-next-line:class-name\nexport interface IEventPayload_R2_EVENT_TRY_LCP_PASS {\n    publicationFilePath: string;\n    lcpPass: string;\n    isSha256Hex: boolean;\n}\n\n// in MAIN: event.sender.send(), where event is from the above ipcMain.on()\n// in RENDERER: ipcRenderer.on()\nexport const R2_EVENT_TRY_LCP_PASS_RES = \"R2_EVENT_TRY_LCP_PASS_RES\";\n// tslint:disable-next-line:class-name\nexport interface IEventPayload_R2_EVENT_TRY_LCP_PASS_RES {\n    okay: boolean;\n    error: string | number | undefined;\n    passSha256Hex: string | undefined;\n}\n"]}