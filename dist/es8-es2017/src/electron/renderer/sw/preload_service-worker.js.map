{"version":3,"file":"preload_service-worker.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/sw/preload_service-worker.ts"],"names":[],"mappings":";AAOA,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAUtC,OAAO,CAAC,GAAG,CAAG,MAAc,CAAC,SAAuB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AAE/E,MAAM,SAAS,GAAK,MAAc,CAAC,MAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClF,MAAM,KAAK,GAAG,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAGnB,MAAM,KAAK,GAAK,MAAc,CAAC,MAAiB,CAAC,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5E,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAEjB,MAAc,CAAC,SAAuB,CAAC,aAAa,CAAC,QAAQ,CAC3D,KAAK,EAAE;IACP,KAAK;CACR,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACd,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACrC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC9B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC3B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAE9B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACb,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC;AAED,MAAc,CAAC,SAAuB,CAAC,aAAa,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC7F,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAEpC,CAAC,CAAC,CAAC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nconsole.log(\"PRELOAD SERVICE WORKER\");\n\n// console.log(process.env);\n\n// console.log(global);\n// console.log(global.window);\n// console.log(global.navigator);\n\n// console.log(global.window.location);\n\nconsole.log(((global as any).navigator as Navigator).serviceWorker.controller);\n\nconst pathItems = ((global as any).window as Window).location.pathname.split(\"/\");\nconst scope = \"/pub/\" + pathItems[2] + \"/\";\nconsole.log(scope);\n\n// routed by HTTP server to ./service-worker.js\nconst swURL = ((global as any).window as Window).location.origin + \"/sw.js\";\nconsole.log(swURL);\n\n((global as any).navigator as Navigator).serviceWorker.register(\n    swURL, {\n    scope,\n}).then((swReg) => {\n    console.log(\"service-worker.js REG\");\n    console.log(swReg);\n    console.log(swReg.installing);\n    console.log(swReg.waiting);\n    console.log(swReg.active);\n\n}).catch((err) => {\n    console.log(\"service-worker.js ERROR\");\n    console.log(err);\n});\n\n((global as any).navigator as Navigator).serviceWorker.addEventListener(\"controllerchange\", () => {\n    console.log(\"controllerchange\");\n    // ((global as any).window as Window).location.reload();\n});\n"]}