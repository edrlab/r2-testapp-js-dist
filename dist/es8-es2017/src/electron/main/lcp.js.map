{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAEjC,4DAAkE;AAElE,gCAAgC;AAChC,uCAAmC;AAEnC,6CAK0B;AAE1B,MAAM,KAAK,GAAG,MAAM,CAAC,8BAA8B,CAAC,CAAC;AAErD,2BAAkC,kBAA0B;IAExD,kBAAO,CAAC,EAAE,CAAC,8BAAqB,EAAE,KAAK,EACnC,KAAU,EACV,OAA4C,EAAE,EAAE;QAMhD,IAAI,CAAC;YAED,MAAM,kBAAY,CAAC,kBAAkB,EACjC,OAAO,CAAC,mBAAmB,EAC3B,CAAC,OAAO,CAAC,OAAO,CAAC,EACjB,OAAO,CAAC,WAAW,CAAC,CAAC;YACzB,IAAI,aAAiC,CAAC;YACtC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvB,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC7C,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjC,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAG3C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC;YACpC,CAAC;YACD,MAAM,UAAU,GAA4C;gBACxD,KAAK,EAAE,SAAS;gBAChB,IAAI,EAAE,IAAI;gBACV,aAAa;aAChB,CAAC;YACF,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAyB,EAAE,UAAU,CAAC,CAAC;QAC7D,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,KAAK,CAAC,GAAG,CAAC,CAAC;YACX,MAAM,UAAU,GAA4C;gBACxD,KAAK,EAAE,GAAG;gBACV,IAAI,EAAE,KAAK;gBACX,aAAa,EAAE,SAAS;aAC3B,CAAC;YACF,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAyB,EAAE,UAAU,CAAC,CAAC;QA8B7D,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAvED,8CAuEC","sourcesContent":["import * as crypto from \"crypto\";\n\nimport { doTryLcpPass } from \"@r2-navigator-js/electron/main/lcp\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\n\nimport {\n    IEventPayload_R2_EVENT_TRY_LCP_PASS,\n    IEventPayload_R2_EVENT_TRY_LCP_PASS_RES,\n    R2_EVENT_TRY_LCP_PASS,\n    R2_EVENT_TRY_LCP_PASS_RES,\n} from \"../common/events\";\n\nconst debug = debug_(\"r2:testapp#electron/main/lcp\");\n\nexport function installLcpHandler(publicationsServer: Server) {\n\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\n        event: any,\n        payload: IEventPayload_R2_EVENT_TRY_LCP_PASS) => {\n\n        // debug(publicationFilePath);\n        // debug(lcpPass);\n\n        // let passSha256Hex: string;\n        try {\n            // passSha256Hex =\n            await doTryLcpPass(publicationsServer,\n                payload.publicationFilePath,\n                [payload.lcpPass],\n                payload.isSha256Hex);\n            let passSha256Hex: string | undefined; // = lcpPass\n            if (!payload.isSha256Hex) {\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(payload.lcpPass);\n                passSha256Hex = checkSum.digest(\"hex\");\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n            } else {\n                passSha256Hex = payload.lcpPass;\n            }\n            const payloadRes: IEventPayload_R2_EVENT_TRY_LCP_PASS_RES = {\n                error: undefined,\n                okay: true,\n                passSha256Hex,\n            };\n            event.sender.send(R2_EVENT_TRY_LCP_PASS_RES, payloadRes);\n        } catch (err) {\n            debug(err);\n            const payloadRes: IEventPayload_R2_EVENT_TRY_LCP_PASS_RES = {\n                error: err,\n                okay: false,\n                passSha256Hex: undefined,\n            };\n            event.sender.send(R2_EVENT_TRY_LCP_PASS_RES, payloadRes);\n\n            // DRMErrorCode (from r2-lcp-client)\n            // 1 === NO CORRECT PASSPHRASE / UERKEY IN GIVEN ARRAY\n            //     // No error\n            //     NONE = 0,\n            //     /**\n            //         WARNING ERRORS > 10\n            //     **/\n            //     // License is out of date (check start and end date)\n            //     LICENSE_OUT_OF_DATE = 11,\n            //     /**\n            //         CRITICAL ERRORS > 100\n            //     **/\n            //     // Certificate has been revoked in the CRL\n            //     CERTIFICATE_REVOKED = 101,\n            //     // Certificate has not been signed by CA\n            //     CERTIFICATE_SIGNATURE_INVALID = 102,\n            //     // License has been issued by an expired certificate\n            //     LICENSE_SIGNATURE_DATE_INVALID = 111,\n            //     // License signature does not match\n            //     LICENSE_SIGNATURE_INVALID = 112,\n            //     // The drm context is invalid\n            //     CONTEXT_INVALID = 121,\n            //     // Unable to decrypt encrypted content key from user key\n            //     CONTENT_KEY_DECRYPT_ERROR = 131,\n            //     // User key check invalid\n            //     USER_KEY_CHECK_INVALID = 141,\n            //     // Unable to decrypt encrypted content from content key\n            //     CONTENT_DECRYPT_ERROR = 151\n        }\n    });\n}\n"]}