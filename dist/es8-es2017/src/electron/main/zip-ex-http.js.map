{"version":3,"file":"zip-ex-http.js","sourceRoot":"","sources":["../../../../../src/electron/main/zip-ex-http.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { PassThrough } from \"stream\";\n\nimport { IStreamAndLength, IZip, Zip } from \"@r2-utils-js/_utils/zip/zip\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:testapp#electron/main/zip-ex-manifest-json\");\n\nexport class ZipExplodedHTTP extends Zip {\n\n    public static async loadPromise(dirPath: string): Promise<IZip> {\n        return Promise.resolve(new ZipExplodedHTTP(dirPath));\n    }\n\n    private constructor(readonly dirPath: string) {\n        super();\n        debug(`ZipExplodedHTTP: ${dirPath}`);\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: ZipExplodedHTTP -- \" + this.dirPath);\n    }\n\n    public entriesCount(): number {\n        return 0; // TODO: hacky! (not really needed ... but still)\n    }\n\n    public hasEntries(): boolean {\n        return true; // TODO: hacky\n    }\n\n    public hasEntry(_entryPath: string): boolean {\n        return true; // TODO: hacky\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        return new Promise<string[]>(async (_resolve, reject) => {\n            reject(\"Not implemented.\");\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip exploded: \" + entryPath);\n        }\n        const url = this.dirPath + \"/\" + entryPath;\n\n        debug(`URL: ${url}`);\n\n        return new Promise(async (topresolve, topreject) => {\n\n            const failure = async (err: any) => {\n                debug(err);\n                topreject(err);\n            };\n\n            const success = async (response: request.RequestResponse) => {\n\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n\n                // debug(response);\n                // debug(response.body);\n\n                if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    await failure(\"HTTP CODE \" + response.statusCode);\n                    return;\n                }\n\n                let length = 0;\n                const lengthStr = response.headers[\"content-length\"];\n                if (lengthStr) {\n                    length = parseInt(lengthStr, 10);\n                }\n\n                const stream = new PassThrough();\n                response.pipe(stream);\n\n                const streamAndLength: IStreamAndLength = {\n                    length,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                topresolve(streamAndLength);\n\n                // let responseStr: string;\n                // if (response.body) {\n                //     debug(\"RES BODY\");\n                //     responseStr = response.body;\n                // } else {\n                //     debug(\"RES STREAM\");\n                //     let responseData: Buffer;\n                //     try {\n                //         responseData = await streamToBufferPromise(response);\n                //     } catch (err) {\n                //         debug(err);\n                //         return;\n                //     }\n                //     responseStr = responseData.toString(\"utf8\");\n                // }\n            };\n\n            // No response streaming! :(\n            // https://github.com/request/request-promise/issues/90\n            const needsStreamingResponse = true;\n\n            if (needsStreamingResponse) {\n                const promise = new Promise((resolve, reject) => {\n                    request.get({\n                        headers: {},\n                        method: \"GET\",\n                        uri: url,\n                    })\n                        .on(\"response\", async (response: request.RequestResponse) => {\n                            await success(response);\n                            resolve();\n                        })\n                        .on(\"error\", async (err: any) => {\n                            await failure(err);\n                            reject();\n                        });\n                });\n                try {\n                    await promise;\n                } catch (err) {\n                    // ignore\n                }\n            } else {\n                let response: requestPromise.FullResponse;\n                try {\n                    // tslint:disable-next-line:await-promise no-floating-promises\n                    response = await requestPromise({\n                        headers: {},\n                        method: \"GET\",\n                        resolveWithFullResponse: true,\n                        uri: url,\n                    });\n                    await success(response);\n                } catch (err) {\n                    await failure(err);\n                }\n            }\n        });\n    }\n}\n"]}