{"version":3,"file":"lsd-deviceid-manager.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd-deviceid-manager.ts"],"names":[],"mappings":";;AAOA,gCAAgC;AAChC,6BAA6B;AAM7B,MAAM,KAAK,GAAG,MAAM,CAAC,+CAA+C,CAAC,CAAC;AAEtE,MAAM,+BAA+B,GAAG,WAAW,CAAC;AAEpD,SAAgB,kBAAkB,CAAC,gBAAwB,EAAE,IAAY;IAErE,MAAM,eAAe,GAAqB;QAEtC,KAAK,CAAC,aAAa,CAAC,GAAW;YAE3B,MAAM,KAAK,GAAG,+BAA+B,GAAG,GAAG,CAAC;YAEpD,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aACrC;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,KAAK,CAAC,WAAW;YAEb,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAEnB,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,EAAE;gBACX,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE;oBACxB,QAAQ,EAAE,EAAE;iBACf,CAAC,CAAC;aACN;iBAAM;gBACH,IAAI,QAAQ,CAAC,QAAQ,EAAE;oBACnB,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC;iBAC1B;qBAAM;oBACH,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC;oBACvB,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;iBACzC;aACJ;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC/B,CAAC;QAED,KAAK,CAAC,aAAa;YACf,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,GAAW;YAC5B,IAAI,EAAsB,CAAC;YAC3B,IAAI;gBACA,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;aACjC;YAAC,OAAO,GAAG,EAAE;gBACV,KAAK,CAAC,GAAG,CAAC,CAAC;aACd;YACD,IAAI,EAAE,EAAE;gBACJ,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,QAAQ,EAAE;oBAEX,KAAK,CAAC,qBAAqB,CAAC,CAAC;oBAC7B,OAAO,OAAO,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;iBAClD;gBAED,MAAM,KAAK,GAAG,+BAA+B,GAAG,GAAG,CAAC;gBACpD,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACrB,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;aACzC;YAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;KACJ,CAAC;IACF,OAAO,eAAe,CAAC;AAC3B,CAAC;AAjED,gDAiEC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as uuid from \"uuid\";\n\nimport { IDeviceIDManager } from \"@r2-lcp-js/lsd/deviceid-manager\";\n\nimport { IStore } from \"../common/store\";\n\nconst debug = debug_(\"r2:testapp#electron/main/lsd-deviceid-manager\");\n\nconst LSD_STORE_DEVICEID_ENTRY_PREFIX = \"deviceID_\";\n\nexport function getDeviceIDManager(electronStoreLSD: IStore, name: string): IDeviceIDManager {\n\n    const deviceIDManager: IDeviceIDManager = {\n\n        async checkDeviceID(key: string): Promise<string | undefined> {\n\n            const entry = LSD_STORE_DEVICEID_ENTRY_PREFIX + key;\n\n            const lsdStore = electronStoreLSD.get(\"lsd\");\n            if (!lsdStore || !lsdStore[entry]) {\n                return Promise.resolve(undefined);\n            }\n\n            return Promise.resolve(lsdStore[entry]);\n        },\n\n        async getDeviceID(): Promise<string> {\n\n            let id = uuid.v4();\n\n            const lsdStore = electronStoreLSD.get(\"lsd\");\n            if (!lsdStore) {\n                electronStoreLSD.set(\"lsd\", {\n                    deviceID: id,\n                });\n            } else {\n                if (lsdStore.deviceID) {\n                    id = lsdStore.deviceID;\n                } else {\n                    lsdStore.deviceID = id;\n                    electronStoreLSD.set(\"lsd\", lsdStore);\n                }\n            }\n\n            return Promise.resolve(id);\n        },\n\n        async getDeviceNAME(): Promise<string> {\n            return Promise.resolve(name);\n        },\n\n        async recordDeviceID(key: string): Promise<void> {\n            let id: string | undefined;\n            try {\n                id = await this.getDeviceID();\n            } catch (err) {\n                debug(err);\n            }\n            if (id) {\n                const lsdStore = electronStoreLSD.get(\"lsd\");\n                if (!lsdStore) {\n                    // Should be init'ed at this.getDeviceID()\n                    debug(\"LSD store problem?!\");\n                    return Promise.reject(\"Cannot get LSD store?\");\n                }\n\n                const entry = LSD_STORE_DEVICEID_ENTRY_PREFIX + key;\n                lsdStore[entry] = id;\n                electronStoreLSD.set(\"lsd\", lsdStore);\n            }\n\n            return Promise.resolve(); // implicit\n        },\n    };\n    return deviceIDManager;\n}\n"]}