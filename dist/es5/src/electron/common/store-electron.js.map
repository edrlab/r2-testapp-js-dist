{"version":3,"file":"store-electron.js","sourceRoot":"","sources":["../../../../../src/electron/common/store-electron.ts"],"names":[],"mappings":";;AASA,8CAAiD;AAEjD;IAGI,uBAAY,IAAY,EAAW,QAAa;QAAb,aAAQ,GAAR,QAAQ,CAAK;QAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,CAAC;YACpC,QAAQ,UAAA;YACR,IAAI,MAAA;SACP,CAAC,CAAC;QACF,IAAI,CAAC,cAAsB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEM,mCAAW,GAAlB;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEM,2BAAG,GAAV,UAAW,GAAW;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IAEM,2BAAG,GAAV,UAAW,GAAuB,EAAE,KAAU;QAC1C,IAAI,GAAG,EAAE;YACL,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAClC;IACL,CAAC;IAEM,iCAAS,GAAhB,UAAiB,GAAW,EAAE,QAAgD;QACzE,IAAI,CAAC,cAAsB,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAEM,8BAAM,GAAb;QACI,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IACL,oBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,sCAAa","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { IStore } from \"./store\";\n\nimport ElectronStore = require(\"electron-store\");\n\nexport class StoreElectron implements IStore {\n    private _electronStore: ElectronStore;\n\n    constructor(name: string, readonly defaults: any) {\n        this._electronStore = new ElectronStore({\n            defaults,\n            name,\n        });\n        (this._electronStore as any).events.setMaxListeners(0);\n    }\n\n    public getDefaults(): any {\n        return this.defaults;\n    }\n\n    public get(key: string): any {\n        return this._electronStore.get(key);\n    }\n\n    public set(key: string | undefined, value: any) {\n        if (key) {\n            this._electronStore.set(key, value);\n        } else {\n            this._electronStore.set(value);\n        }\n    }\n\n    public onChanged(key: string, callback: (newValue: any, oldValue: any) => void): void {\n        (this._electronStore as any).onDidChange(key, callback);\n    }\n\n    public reveal() {\n        this._electronStore.openInEditor();\n    }\n}\n"]}