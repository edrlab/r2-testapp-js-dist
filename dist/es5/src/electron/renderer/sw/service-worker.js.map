{"version":3,"file":"service-worker.js","sourceRoot":"","sources":["../../../../../../src/electron/renderer/sw/service-worker.ts"],"names":[],"mappings":";AAiBA,iBAkEA;AAlEA,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAQ9B,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAO,MAAM;;;;gBAC1C,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBACzC,WAAO,IAAY,CAAC,WAAW,EAAE,EAAA;;gBAAjC,SAAiC,CAAC;;;;KACrC,CAAC,CAAC;AAEH,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAC,KAAU;IACzC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IACxC,KAAK,CAAC,SAAS,CAAE,IAAY,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,KAAU;IACtC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IAGvC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC/B,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,IAAS,EAAE,IAAS;QAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAOH,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IAClC,IAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;AA+BpC,CAAC,CAAC,CAAC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\n/// <referencexx path='../../../node_modules/typescript/lib/lib.es2015.d.ts' />\n/// <referencexx path='../../../node_modules/typescript/lib/lib.webworker.d.ts' />\n/// <referencexx path='../../../node_modules/typescript/lib/lib.dom.d.ts' />\n// tslint:disablexx:no-reference\n// import { ServiceWorkerGlobalScope } from \"../../../node_modules/typescript/lib/lib.webworker.d.ts\";\n// const { clients, addEventListener, skipWaiting, registration } = self as ServiceWorkerGlobalScope;\n// (function (self: ServiceWorkerGlobalScope) {\n//     //Service worker contents...\n//  })(<ServiceWorkerGlobalScope>self);\n\nconsole.log(\"SERVICE WORKER\");\n\n// self.addEventListener('message', function (event) {\n//     if (event.data.action == 'skipWaiting') {\n//         self.skipWaiting()\n//     }\n// });\n\nself.addEventListener(\"install\", async (_event) => {\n    console.log(\"service-worker.js INSTALL\");\n    await (self as any).skipWaiting();\n});\n\nself.addEventListener(\"activate\", (event: any) => {\n    console.log(\"service-worker.js ACTIVE\");\n    event.waitUntil((self as any).clients.claim());\n});\n\nself.addEventListener(\"fetch\", (event: any) => {\n    console.log(\"service-worker.js FETCH\");\n\n    // console.log(event.request);\n    console.log(event.request.url);\n    event.request.headers.forEach((arg0: any, arg1: any) => {\n        console.log(arg0 + \" => \" + arg1);\n    });\n\n    //   var mode = event.request.mode;\n    //   if (mode === \"navigate\") {\n    //     mode = \"cors\";\n    //   }\n\n    const req = event.request.clone();\n    const fetchPromise = fetch(req);\n    event.respondWith(fetchPromise);\n\n    // if (event.request.url.indexOf(\"/pub/*-\") >= 0\n    //     || event.request.url.endsWith(\"manifest.json\")\n    //     || event.request.url.endsWith(\"/\")) {\n    //     const req = event.request.clone();\n    //     const fetchPromise = fetch(req);\n    //     event.respondWith(fetchPromise);\n    // } else {\n    //     console.log(\"re-fetching with LCP user pass ...\");\n    //     const newUrl = event.request.url.replace(\"/pub/\",\n    //         \"/pub/*-ZWM0ZjJkYmIzYjE0MDA5NTU1MGM5YWZiYmI2OWI1ZDZmZDllODE0YjlkYTgyZmFkMGIzNGU5ZmNiZTU2ZjFjYg==-*\");\n    //     const fetchPromise = fetch(newUrl);\n    //     event.respondWith(fetchPromise);\n    // }\n\n    // // tslint:disable-next-line:no-floating-promises\n    // (async () => {\n    //     try {\n    //         const response = await fetch(req);\n    //         if (!response.ok) {\n    //             console.log(\"BAD FETCH RESPONSE?!\");\n    //         }\n    //         response.headers.forEach(function () { console.log(arguments[1] + \" => \" + arguments[0]); });\n\n    //         var blob = await response.arrayBuffer\n    //         ...\n    //     } catch (e) {\n    //         console.log(e);\n    //     }\n    // })();\n});\n"]}