{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/electron/main/index.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\n// https://github.com/electron/electron/blob/master/docs/api/sandbox-option.md\n// https://github.com/electron/electron/blob/master/docs/api/process.md\n// https://github.com/electron/electron/blob/master/docs/api/browser-window.md\n// https://github.com/electron/electron/blob/master/docs/api/protocol.md\n// https://github.com/electron/electron/blob/master/docs/api/web-frame.md\n// https://github.com/electron/electron/blob/master/docs/api/web-contents.md\n// https://github.com/electron/electron/blob/master/docs/api/web-request.md\n// https://github.com/electron/electron/blob/master/docs/api/session.md\n// https://github.com/electron/electron/blob/master/docs/api/webview-tag.md\n// https://github.com/electron/electron/blob/master/docs/api/browser-view.md\n// https://github.com/electron/electron/blob/master/docs/api/client-request.md\n// https://github.com/electron/electron/blob/master/docs/api/sandbox-option.md\n// https://github.com/electron/electron/blob/master/docs/api/dialog.md\n// https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { URL } from \"url\";\n\nimport { launchStatusDocumentProcessing } from \"@r2-lcp-js/lsd/status-document-processing\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { setLcpNativePluginPath } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { downloadEPUBFromLCPL } from \"@r2-lcp-js/publication-download\";\nimport { IEventPayload_R2_EVENT_READIUMCSS } from \"@r2-navigator-js/electron/common/events\";\nimport {\n    IReadiumCSS,\n    readiumCSSDefaults,\n} from \"@r2-navigator-js/electron/common/readium-css-settings\";\nimport { convertHttpUrlToCustomScheme } from \"@r2-navigator-js/electron/common/sessions\";\nimport { trackBrowserWindow } from \"@r2-navigator-js/electron/main/browser-window-tracker\";\nimport { lsdLcpUpdateInject } from \"@r2-navigator-js/electron/main/lsd-injectlcpl\";\nimport { setupReadiumCSS } from \"@r2-navigator-js/electron/main/readium-css\";\nimport { initSessions, secureSessions } from \"@r2-navigator-js/electron/main/sessions\";\nimport {\n    initGlobalConverters_OPDS,\n} from \"@r2-opds-js/opds/init-globals\";\nimport {\n    initGlobalConverters_GENERIC,\n    initGlobalConverters_SHARED,\n} from \"@r2-shared-js/init-globals\";\nimport { Publication } from \"@r2-shared-js/models/publication\";\nimport { Link } from \"@r2-shared-js/models/publication-link\";\nimport { isEPUBlication } from \"@r2-shared-js/parser/epub\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport { encodeURIComponent_RFC3986 } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { ZipExploded } from \"@r2-utils-js/_utils/zip/zip-ex\";\nimport { ZipExplodedHTTP } from \"@r2-utils-js/_utils/zip/zip-ex-http\";\nimport * as debug_ from \"debug\";\nimport { BrowserWindow, Menu, app, dialog, ipcMain, webContents } from \"electron\";\nimport * as express from \"express\";\nimport * as filehound from \"filehound\";\nimport * as portfinder from \"portfinder\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport { JSON as TAJSON } from \"ta-json-x\";\n\nimport { R2_EVENT_DEVTOOLS } from \"../common/events\";\nimport { IStore } from \"../common/store\";\nimport { StoreElectron } from \"../common/store-electron\";\nimport { installLcpHandler } from \"./lcp\";\nimport { installLsdHandler } from \"./lsd\";\nimport { getDeviceIDManager } from \"./lsd-deviceid-manager\";\n\nconst SECURE = false;\n\nconst electronStoreLSD: IStore = new StoreElectron(\"readium2-testapp-lsd\", {});\nconst deviceIDManager = getDeviceIDManager(electronStoreLSD, \"Readium2 Electron desktop app\");\n\n// import * as mime from \"mime-types\";\n\ninitGlobalConverters_OPDS();\ninitGlobalConverters_SHARED();\ninitGlobalConverters_GENERIC();\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nconst lcpPluginPath = IS_DEV ?\n    path.join(process.cwd(), \"LCP\", \"lcp.node\") :\n    path.join(__dirname, \"lcp.node\");\nsetLcpNativePluginPath(lcpPluginPath);\n\nconst debug = debug_(\"r2:testapp#electron/main/index\");\n\nlet _publicationsServer: Server;\nlet _publicationsServerPort: number;\nlet _publicationsRootUrl: string;\nlet _publicationsFilePaths: string[];\nlet _publicationsUrls: string[];\n\nlet DEFAULT_BOOK_PATH = path.join(IS_DEV ? process.cwd() : __dirname, \"misc\", \"epubs\");\ndebug(DEFAULT_BOOK_PATH);\nif (fs.existsSync(DEFAULT_BOOK_PATH)) {\n    debug(\"DEFAULT_BOOK_PATH => exists\");\n    DEFAULT_BOOK_PATH = fs.realpathSync(path.resolve(DEFAULT_BOOK_PATH));\n    debug(DEFAULT_BOOK_PATH);\n} else {\n    debug(\"DEFAULT_BOOK_PATH => missing\");\n    DEFAULT_BOOK_PATH = \".\";\n}\n\nlet _lastBookPath: string | undefined;\n\n// protocol.registerStandardSchemes([\"epub\", \"file\"], { secure: true });\n\nfunction openAllDevTools() {\n    for (const wc of webContents.getAllWebContents()) {\n        // if (wc.hostWebContents &&\n        //     wc.hostWebContents.id === electronBrowserWindow.webContents.id) {\n        // }\n        wc.openDevTools();\n    }\n}\n\n// function openTopLevelDevTools() {\n//     const bw = BrowserWindow.getFocusedWindow();\n//     if (bw) {\n//         bw.webContents.openDevTools();\n//     } else {\n//         const arr = BrowserWindow.getAllWindows();\n//         arr.forEach((bww) => {\n//             bww.webContents.openDevTools();\n//         });\n//     }\n// }\n\nipcMain.on(R2_EVENT_DEVTOOLS, (_event: any, _arg: any) => {\n    openAllDevTools();\n});\n\nfunction isManifestJSON(urlOrPath: string): boolean {\n    let p = urlOrPath;\n    if (isHTTP(urlOrPath)) {\n        const url = new URL(urlOrPath);\n        p = url.pathname;\n    }\n    // const fileName = path.basename(p);\n    const isMan = /.*manifest\\.json[\\?]?.*/.test(p); // TODO: hacky!\n    debug(\"########### IS MANIFEST: \" + isMan);\n    return isMan;\n}\n\nasync function createElectronBrowserWindow(publicationFilePath: string, publicationUrl: string) {\n\n    debug(\"createElectronBrowserWindow() \" + publicationFilePath + \" : \" + publicationUrl);\n\n    let lcpHint: string | undefined;\n    let publication: Publication | undefined;\n\n    if (isManifestJSON(publicationFilePath)) {\n        // if (!isHTTP(publicationFilePath)) {\n        //     debug(\"**** isManifestJSON && !isHTTP\");\n        //     const manifestJsonDir = path.dirname(publicationFilePath);\n        //     debug(manifestJsonDir);\n        //     const publicationFilePathBase64 =\n        //         encodeURIComponent_RFC3986(Buffer.from(publicationFilePath).toString(\"base64\"));\n        //     const routePath = \"/xpub/\" + publicationFilePathBase64;\n        //     debug(routePath);\n        //     // https://expressjs.com/en/4x/api.html#express.static\n        //     const staticOptions = {\n        //         dotfiles: \"ignore\",\n        //         etag: false,\n        //         fallthrough: false,\n        //         immutable: true,\n        //         index: false,\n        //         maxAge: \"1d\",\n        //         redirect: false,\n        //         // extensions: [\"css\", \"otf\"],\n        //         // setHeaders: function (res, path, stat) {\n        //         //   res.set('x-timestamp', Date.now())\n        //         // }\n        //     };\n        //     _publicationsServer.expressUse(routePath,\n        //         express.static(manifestJsonDir, staticOptions));\n        //     publicationUrl = `${_publicationsServer.serverUrl()}${routePath}/manifest.json`;\n        //     debug(publicationUrl);\n        // }\n\n        const failure = async (err: any) => {\n            debug(err);\n        };\n\n        const handleLCP = (responseStr: string, pub: Publication) => {\n            const responseJson = global.JSON.parse(responseStr);\n            debug(responseJson);\n\n            let lcpl: LCP | undefined;\n            lcpl = TAJSON.deserialize<LCP>(responseJson, LCP);\n            lcpl.ZipPath = \"META-INF/license.lcpl\";\n            lcpl.JsonSource = responseStr;\n            lcpl.init();\n\n            // breakLength: 100  maxArrayLength: undefined\n            // console.log(util.inspect(lcpl,\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n            pub.LCP = lcpl;\n            // publicationUrl = publicationUrl.replace(\"/pub/\",\n            //     \"/pub/\" + _publicationsServer.lcpBeginToken +\n            //     \"URL_LCP_PASS_PLACEHOLDER\" + _publicationsServer.lcpEndToken);\n            // debug(publicationUrl);\n        };\n\n        const successLCP = async (response: request.RequestResponse, pub: Publication) => {\n\n            // Object.keys(response.headers).forEach((header: string) => {\n            //     debug(header + \" => \" + response.headers[header]);\n            // });\n\n            // debug(response);\n            // debug(response.body);\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                await failure(\"HTTP CODE \" + response.statusCode);\n                return;\n            }\n\n            let responseStr: string;\n            if (response.body) {\n                debug(\"RES BODY\");\n                responseStr = response.body;\n            } else {\n                debug(\"RES STREAM\");\n                let responseData: Buffer;\n                try {\n                    responseData = await streamToBufferPromise(response);\n                } catch (err) {\n                    debug(err);\n                    return;\n                }\n                responseStr = responseData.toString(\"utf8\");\n            }\n\n            handleLCP(responseStr, pub);\n        };\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n\n        const handleManifestJson = async (responseStr: string) => {\n            const manifestJson = global.JSON.parse(responseStr);\n            debug(manifestJson);\n\n            // hacky! assumes obfuscated fonts are transformed on the server side\n            // (yet crypto info is present in manifest).\n            // Note that local manifest.json generated with the r2-shared-js CLI does not contain crypto info\n            // when resources are actually produced in plain text.\n            if (isHTTP(publicationFilePath)) {\n\n                const arrLinks = [];\n                if (manifestJson.readingOrder) {\n                    arrLinks.push(...manifestJson.readingOrder);\n                }\n                if (manifestJson.resources) {\n                    arrLinks.push(...manifestJson.resources);\n                }\n\n                arrLinks.forEach((link: any) => {\n                    if (link.properties && link.properties.encrypted &&\n                        (link.properties.encrypted.algorithm === \"http://www.idpf.org/2008/embedding\" ||\n                        link.properties.encrypted.algorithm === \"http://ns.adobe.com/pdf/enc#RC\")) {\n                        delete link.properties.encrypted;\n\n                        let atLeastOne = false;\n                        const jsonProps = Object.keys(link.properties);\n                        if (jsonProps) {\n                            jsonProps.forEach((jsonProp) => {\n                                if (link.properties.hasOwnProperty(jsonProp)) {\n                                    atLeastOne = true;\n                                    return false;\n                                }\n                                return true;\n                            });\n                        }\n                        if (!atLeastOne) {\n                            delete link.properties;\n                        }\n                    }\n                });\n            }\n\n            try {\n                publication = TAJSON.deserialize<Publication>(manifestJson, Publication);\n            } catch (erorz) {\n                debug(erorz);\n                return;\n            }\n            debug(publication);\n\n            let p = publicationFilePath;\n            if (isHTTP(publicationFilePath)) {\n                const url = new URL(publicationFilePath);\n                p = url.pathname;\n            }\n            publication.AddToInternal(\"filename\", path.basename(p));\n            publication.AddToInternal(\"type\", \"epub\");\n\n            if (!isHTTP(publicationFilePath)) {\n                const dirPath = path.dirname(publicationFilePath);\n                const zip = await ZipExploded.loadPromise(dirPath);\n                publication.AddToInternal(\"zip\", zip);\n            } else {\n                const url = new URL(publicationFilePath);\n                const dirPath = path.dirname(p);\n                url.pathname = dirPath + \"/\";\n                const zip = await ZipExplodedHTTP.loadPromise(url.toString());\n                publication.AddToInternal(\"zip\", zip);\n            }\n\n            const pathDecoded = publicationFilePath;\n            // const pathBase64 = decodeURIComponent(publicationFilePath.replace(/.*\\/pub\\/(.*)\\/manifest.json/, \"$1\"));\n            // debug(pathBase64);\n            // const pathDecoded = new Buffer(pathBase64, \"base64\").toString(\"utf8\");\n            // debug(pathDecoded);\n            // // const pathFileName = pathDecoded.substr(\n            // //     pathDecoded.replace(/\\\\/g, \"/\").lastIndexOf(\"/\") + 1,\n            // //     pathDecoded.length - 1);\n            // // debug(pathFileName);\n\n            debug(\"ADDED HTTP pub to server cache: \" + pathDecoded + \" --- \" + publicationFilePath);\n            const publicationUrls = _publicationsServer.addPublications([pathDecoded]);\n            _publicationsServer.cachePublication(pathDecoded, publication);\n            const pubCheck = _publicationsServer.cachedPublication(pathDecoded);\n            if (!pubCheck) {\n                debug(\"PUB CHECK FAIL?\");\n            }\n            // const publicationFilePathBase64 =\n            //     encodeURIComponent_RFC3986(Buffer.from(pathDecoded).toString(\"base64\"));\n            // publicationUrl = `${_publicationsServer.serverUrl()}/pub/${publicationFilePathBase64}/manifest.json`;\n            publicationUrl = `${_publicationsServer.serverUrl()}${publicationUrls[0]}`;\n            debug(publicationUrl);\n\n            if (publication.Links) {\n                const licenseLink = publication.Links.find((link) => {\n                    return link.Rel.indexOf(\"license\") >= 0 &&\n                        link.TypeLink === \"application/vnd.readium.lcp.license.v1.0+json\";\n                });\n                if (licenseLink && licenseLink.Href) {\n                    let lcplHref = licenseLink.Href;\n                    if (!isHTTP(lcplHref)) {\n                        // lcplHref = publicationFilePath + \"/../\" + licenseLink.Href;\n                        lcplHref = publicationFilePath.replace(\"manifest.json\", licenseLink.Href);\n                    }\n                    debug(lcplHref);\n\n                    if (isHTTP(lcplHref)) {\n                        // No response streaming! :(\n                        // https://github.com/request/request-promise/issues/90\n                        // const needsStreamingResponse = true;\n                        if (needsStreamingResponse) {\n                            const promise = new Promise((resolve, reject) => {\n                                request.get({\n                                    headers: {},\n                                    method: \"GET\",\n                                    uri: lcplHref,\n                                })\n                                    .on(\"response\", async (responsez: request.RequestResponse) => {\n                                        await successLCP(responsez, publication as Publication);\n                                        resolve();\n                                    })\n                                    .on(\"error\", async (err: any) => {\n                                        await failure(err);\n                                        reject();\n                                    });\n                            });\n                            try {\n                                await promise;\n                            } catch (err) {\n                                return;\n                            }\n                        } else {\n                            let responsez: requestPromise.FullResponse;\n                            try {\n                                // tslint:disable-next-line:await-promise no-floating-promises\n                                responsez = await requestPromise({\n                                    headers: {},\n                                    method: \"GET\",\n                                    resolveWithFullResponse: true,\n                                    uri: lcplHref,\n                                });\n                            } catch (err) {\n                                await failure(err);\n                                return;\n                            }\n                            await successLCP(responsez, publication);\n                        }\n                    } else {\n                        const responsezStr = fs.readFileSync(lcplHref, { encoding: \"utf8\" });\n                        if (!responsezStr) {\n                            await failure(\"Cannot read local file: \" + lcplHref);\n                            return;\n                        }\n                        handleLCP(responsezStr, publication);\n                    }\n                }\n            }\n        };\n\n        if (isHTTP(publicationFilePath)) {\n            const success = async (response: request.RequestResponse) => {\n\n                // Object.keys(response.headers).forEach((header: string) => {\n                //     debug(header + \" => \" + response.headers[header]);\n                // });\n\n                // debug(response);\n                // debug(response.body);\n\n                if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    await failure(\"HTTP CODE \" + response.statusCode);\n                    return;\n                }\n\n                let responseStr: string;\n                if (response.body) {\n                    debug(\"RES BODY\");\n                    responseStr = response.body;\n                } else {\n                    debug(\"RES STREAM\");\n                    let responseData: Buffer;\n                    try {\n                        responseData = await streamToBufferPromise(response);\n                    } catch (err) {\n                        debug(err);\n                        return;\n                    }\n                    responseStr = responseData.toString(\"utf8\");\n                }\n                await handleManifestJson(responseStr);\n            };\n\n            if (needsStreamingResponse) {\n                const promise = new Promise((resolve, reject) => {\n                    request.get({\n                        headers: {},\n                        method: \"GET\",\n                        uri: publicationFilePath,\n                    })\n                        .on(\"response\", async (response: request.RequestResponse) => {\n                            await success(response);\n                            resolve();\n                        })\n                        .on(\"error\", async (err: any) => {\n                            await failure(err);\n                            reject();\n                        });\n                });\n                try {\n                    await promise;\n                } catch (err) {\n                    return;\n                }\n            } else {\n                let response: requestPromise.FullResponse;\n                try {\n                    // tslint:disable-next-line:await-promise no-floating-promises\n                    response = await requestPromise({\n                        headers: {},\n                        method: \"GET\",\n                        resolveWithFullResponse: true,\n                        uri: publicationFilePath,\n                    });\n                } catch (err) {\n                    await failure(err);\n                    return;\n                }\n                await success(response);\n            }\n        } else {\n            const responseStr = fs.readFileSync(publicationFilePath, { encoding: \"utf8\" });\n            if (!responseStr) {\n                await failure(\"Cannot read local file: \" + publicationFilePath);\n                return;\n            }\n            await handleManifestJson(responseStr);\n        }\n    } else if (isEPUBlication(publicationFilePath)) {\n\n        // const fileName = path.basename(publicationFilePath);\n        // const ext = path.extname(fileName).toLowerCase();\n\n        try {\n            publication = await _publicationsServer.loadOrGetCachedPublication(publicationFilePath);\n        } catch (err) {\n            debug(err);\n            return;\n        }\n    }\n\n    if (publication && publication.LCP) {\n        debug(publication.LCP);\n\n        try {\n            await launchStatusDocumentProcessing(publication.LCP, deviceIDManager,\n                async (licenseUpdateJson: string | undefined) => {\n                    debug(\"launchStatusDocumentProcessing DONE.\");\n\n                    if (licenseUpdateJson) {\n                        let res: string;\n                        try {\n                            res = await lsdLcpUpdateInject(\n                                licenseUpdateJson,\n                                publication as Publication,\n                                publicationFilePath);\n                            debug(\"EPUB SAVED: \" + res);\n                        } catch (err) {\n                            debug(err);\n                        }\n                    }\n                });\n        } catch (err) {\n            debug(err);\n        }\n\n        if (publication.LCP.Encryption &&\n            publication.LCP.Encryption.UserKey &&\n            publication.LCP.Encryption.UserKey.TextHint) {\n            lcpHint = publication.LCP.Encryption.UserKey.TextHint;\n        }\n        if (!lcpHint) {\n            lcpHint = \"LCP passphrase\";\n        }\n    }\n\n    const electronBrowserWindow = new BrowserWindow({\n        height: 600,\n        webPreferences: {\n            allowRunningInsecureContent: false,\n            contextIsolation: false,\n            devTools: true,\n            nodeIntegration: true,\n            nodeIntegrationInWorker: false,\n            sandbox: false,\n            webSecurity: true,\n            webviewTag: true,\n            // preload: __dirname + \"/\" + \"preload.js\",\n        },\n        width: 800,\n    });\n    trackBrowserWindow(electronBrowserWindow);\n\n    // electronBrowserWindow.on(\"resize\", () => {\n    //     const [width, height] = electronBrowserWindow.getContentSize();\n\n    //     for (const wc of webContents.getAllWebContents()) {\n    //         if (wc.hostWebContents &&\n    //             wc.hostWebContents.id === electronBrowserWindow.webContents.id) {\n    //             wc.setSize({\n    //                 normal: {\n    //                     height: 400,\n    //                     width,\n    //                 },\n    //             });\n    //         }\n    //     }\n    // });\n\n    electronBrowserWindow.webContents.on(\"dom-ready\", () => {\n        debug(\"electronBrowserWindow dom-ready \" + publicationFilePath + \" : \" + publicationUrl);\n        // electronBrowserWindow.webContents.openDevTools();\n    });\n\n    if (SECURE && isHTTP(publicationUrl)) { // && !isManifestJSON(publicationFilePath)\n        // This triggers the origin-sandbox for localStorage, etc.\n        publicationUrl = convertHttpUrlToCustomScheme(publicationUrl);\n    }\n\n    const urlEncoded = encodeURIComponent_RFC3986(publicationUrl);\n    let htmlPath = IS_DEV ? `${__dirname}/../renderer/index.html` : `${__dirname}/index.html`;\n    htmlPath = htmlPath.replace(/\\\\/g, \"/\");\n    let fullUrl = `file://${htmlPath}?pub=${urlEncoded}`;\n    if (lcpHint) {\n        fullUrl = fullUrl + \"&lcpHint=\" + encodeURIComponent_RFC3986(lcpHint);\n    }\n    // fullUrl = fullUrl + \"&lcpPlugin=\" + encodeURIComponent_RFC3986(Buffer.from(lcpPluginPath).toString(\"base64\"));\n\n    const urlRoot = _publicationsServer.serverUrl() as string;\n    fullUrl = fullUrl + \"&pubServerRoot=\" + encodeURIComponent_RFC3986(urlRoot);\n\n    // `file://${process.cwd()}/src/electron/renderer/index.html`;\n    // `file://${__dirname}/../../../../src/electron/renderer/index.html`\n    debug(fullUrl);\n    electronBrowserWindow.webContents.loadURL(fullUrl, { extraHeaders: \"pragma: no-cache\\n\" });\n}\n\ninitSessions();\n\nfunction isFixedLayout(publication: Publication, link: Link | undefined): boolean {\n    if (link && link.Properties) {\n        if (link.Properties.Layout === \"fixed\") {\n            return true;\n        }\n        if (typeof link.Properties.Layout !== \"undefined\") {\n            return false;\n        }\n    }\n    if (publication &&\n        publication.Metadata &&\n        publication.Metadata.Rendition) {\n        return publication.Metadata.Rendition.Layout === \"fixed\";\n    }\n    return false;\n}\n\nconst readiumCssDefaultsJson: IReadiumCSS = readiumCSSDefaults;\nconst readiumCssKeys = Object.keys(readiumCSSDefaults);\n// console.log(readiumCssKeys);\nreadiumCssKeys.forEach((key: string) => {\n    const value = (readiumCSSDefaults as any)[key];\n    // console.log(key, \" => \", value);\n    if (typeof value === \"undefined\") {\n        (readiumCssDefaultsJson as any)[key] = null;\n    } else {\n        (readiumCssDefaultsJson as any)[key] = value;\n    }\n});\n\nconst electronStore: IStore = new StoreElectron(\"readium2-testapp\", {\n    basicLinkTitles: true,\n    readiumCSS: readiumCssDefaultsJson,\n    readiumCSSEnable: false,\n});\n\nfunction __computeReadiumCssJsonMessage(publication: Publication, link: Link | undefined):\n    IEventPayload_R2_EVENT_READIUMCSS {\n\n    if (isFixedLayout(publication, link)) {\n        return { setCSS: undefined, isFixedLayout: true };\n    }\n\n    const pubServerRoot = _publicationsServer.serverUrl() as string;\n\n    const on = electronStore.get(\"readiumCSSEnable\");\n    if (on) {\n        let cssJson = electronStore.get(\"readiumCSS\");\n        if (!cssJson) {\n            cssJson = readiumCSSDefaults;\n        }\n        const jsonMsg: IEventPayload_R2_EVENT_READIUMCSS = {\n            setCSS: cssJson,\n            urlRoot: pubServerRoot,\n        };\n        return jsonMsg;\n    } else {\n        return { setCSS: undefined }; // reset all (disable ReadiumCSS)\n    }\n}\n\napp.on(\"ready\", () => {\n    debug(\"app ready\");\n\n    // protocol.registerServiceWorkerSchemes([\"epub\"]);\n\n    // registerFileProtocol\n    // protocol.registerBufferProtocol(\"epub\",\n    //     (request, callback) => {\n    //         debug(request.url);\n    //         const data = fs.readFileSync(request.url);\n    //         const mimeType = mime.lookup(request.url);\n    //         callback({ data, mimeType });\n    //     }, (error) => {\n    //         debug(error);\n    //     });\n\n    // tslint:disable-next-line:no-floating-promises\n    (async () => {\n        try {\n            _publicationsFilePaths = await filehound.create()\n                .depth(0)\n                .ignoreHiddenDirectories()\n                .ignoreHiddenFiles()\n                // .discard(\"node_modules\")\n                // .discard(\".*.asar\")\n                .paths(DEFAULT_BOOK_PATH)\n                .ext([\".epub\", \".epub3\", \".cbz\", \".lcpl\"])\n                .find();\n        } catch (err) {\n            debug(err);\n        }\n        debug(_publicationsFilePaths);\n\n        _publicationsServer = new Server({\n            disableDecryption: false,\n            disableOPDS: true,\n            disableReaders: true,\n            disableRemotePubUrl: true,\n        });\n\n        if (SECURE) {\n            secureSessions(_publicationsServer); // port 443 ==> HTTPS\n        }\n\n        installLcpHandler(_publicationsServer);\n        installLsdHandler(_publicationsServer, deviceIDManager);\n\n        const readiumCSSPath = IS_DEV ?\n            path.join(process.cwd(), \"dist\", \"ReadiumCSS\").replace(/\\\\/g, \"/\") :\n            path.join(__dirname, \"ReadiumCSS\").replace(/\\\\/g, \"/\");\n\n        setupReadiumCSS(_publicationsServer, readiumCSSPath, __computeReadiumCssJsonMessage);\n\n        // For the webview preload sourcemaps (local file URL)\n        if (IS_DEV) {\n            let preloadPath = \"FOLDER_PATH_TO/preload.js\";\n            // TODO: REEEALLY HACKY! (and does not work in release bundle mode, only with dist/ exploded code)\n            let distTarget: string | undefined;\n            const dirnameSlashed = __dirname.replace(/\\\\/g, \"/\");\n            if (dirnameSlashed.indexOf(\"/dist/es5\") > 0) {\n                distTarget = \"es5\";\n            } else if (dirnameSlashed.indexOf(\"/dist/es6-es2015\") > 0) {\n                distTarget = \"es6-es2015\";\n            } else if (dirnameSlashed.indexOf(\"/dist/es7-es2016\") > 0) {\n                distTarget = \"es7-es2016\";\n            } else if (dirnameSlashed.indexOf(\"/dist/es8-es2017\") > 0) {\n                distTarget = \"es8-es2017\";\n            }\n            if (distTarget) {\n                preloadPath = path.join(process.cwd(),\n                    \"node_modules/r2-navigator-js/dist/\" +\n                    distTarget); // + \"/src/electron/renderer/webview/preload.js\"\n            }\n            preloadPath = preloadPath.replace(/\\\\/g, \"/\");\n            console.log(preloadPath);\n            // https://expressjs.com/en/4x/api.html#express.static\n            const staticOptions = {\n                dotfiles: \"ignore\",\n                etag: true,\n                fallthrough: false,\n                immutable: true,\n                index: false,\n                maxAge: \"1d\",\n                redirect: false,\n                // extensions: [\"css\", \"otf\"],\n                // setHeaders: function (res, path, stat) {\n                //   res.set('x-timestamp', Date.now())\n                // }\n            };\n            _publicationsServer.expressUse(preloadPath, express.static(preloadPath, staticOptions));\n        }\n\n        // _publicationsServer.expressGet([\"/resize-sensor.js\"],\n        //     (req: express.Request, res: express.Response) => {\n\n        //         const swPth = \"./renderer/ResizeSensor.js\";\n        //         const swFullPath = path.resolve(path.join(__dirname, swPth));\n        //         if (!fs.existsSync(swFullPath)) {\n\n        //             const err = \"Missing ResizeSensor JS! \";\n        //             debug(err + swFullPath);\n        //             res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n        //                 + err + \"</p></body></html>\");\n        //             return;\n        //         }\n\n        //         const swJS = fs.readFileSync(swFullPath, { encoding: \"utf8\" });\n        //         // debug(swJS);\n\n        //         // this.setResponseCORS(res);\n        //         res.set(\"Content-Type\", \"text/javascript; charset=utf-8\");\n\n        //         const checkSum = crypto.createHash(\"sha256\");\n        //         checkSum.update(swJS);\n        //         const hash = checkSum.digest(\"hex\");\n\n        //         const match = req.header(\"If-None-Match\");\n        //         if (match === hash) {\n        //             debug(\"ResizeSensor.js cache\");\n        //             res.status(304); // StatusNotModified\n        //             res.end();\n        //             return;\n        //         }\n\n        //         res.setHeader(\"ETag\", hash);\n        //         // res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n        //         res.status(200).send(swJS);\n        //     });\n\n        // _publicationsServer.expressGet([\"/sw.js\"],\n        //     (req: express.Request, res: express.Response) => {\n\n        //         const swPth = \"./renderer/sw/service-worker.js\";\n        //         const swFullPath = path.resolve(path.join(__dirname, swPth));\n        //         if (!fs.existsSync(swFullPath)) {\n\n        //             const err = \"Missing Service Worker JS! \";\n        //             debug(err + swFullPath);\n        //             res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n        //                 + err + \"</p></body></html>\");\n        //             return;\n        //         }\n\n        //         const swJS = fs.readFileSync(swFullPath, { encoding: \"utf8\" });\n        //         // debug(swJS);\n\n        //         // this.setResponseCORS(res);\n        //         res.set(\"Content-Type\", \"text/javascript; charset=utf-8\");\n\n        //         const checkSum = crypto.createHash(\"sha256\");\n        //         checkSum.update(swJS);\n        //         const hash = checkSum.digest(\"hex\");\n\n        //         const match = req.header(\"If-None-Match\");\n        //         if (match === hash) {\n        //             debug(\"service-worker.js cache\");\n        //             res.status(304); // StatusNotModified\n        //             res.end();\n        //             return;\n        //         }\n\n        //         res.setHeader(\"ETag\", hash);\n        //         // res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n        //         res.status(200).send(swJS);\n        //     });\n\n        const pubPaths = _publicationsServer.addPublications(_publicationsFilePaths);\n\n        try {\n            _publicationsServerPort = await portfinder.getPortPromise();\n        } catch (err) {\n            debug(err);\n        }\n\n        // Force HTTPS, see secureSessions()\n        // const serverInfo =\n        await _publicationsServer.start(_publicationsServerPort, SECURE);\n        // debug(serverInfo);\n\n        _publicationsRootUrl = _publicationsServer.serverUrl() as string;\n        debug(_publicationsRootUrl);\n\n        _publicationsUrls = pubPaths.map((pubPath) => {\n            return `${_publicationsRootUrl}${pubPath}`;\n        });\n        debug(_publicationsUrls);\n\n        resetMenu();\n\n        process.nextTick(async () => {\n\n            const args = process.argv.slice(2);\n            debug(\"args:\");\n            debug(args);\n            let filePathToLoadOnLaunch: string | undefined;\n            if (args && args.length && args[0]) {\n                const argPath = args[0].trim();\n                let filePath = argPath;\n                debug(filePath);\n                if (isHTTP(filePath)) {\n                    await openFile(filePath);\n                    return;\n                } else {\n                    if (!fs.existsSync(filePath)) {\n                        filePath = path.join(__dirname, argPath);\n                        debug(filePath);\n                        if (!fs.existsSync(filePath)) {\n                            filePath = path.join(process.cwd(), argPath);\n                            debug(filePath);\n                            if (!fs.existsSync(filePath)) {\n                                debug(\"FILEPATH DOES NOT EXIST: \" + filePath);\n                            } else {\n                                filePathToLoadOnLaunch = filePath;\n                            }\n                        } else {\n                            filePathToLoadOnLaunch = filePath;\n                        }\n                    } else {\n                        filePath = fs.realpathSync(filePath);\n                        debug(filePath);\n                        filePathToLoadOnLaunch = filePath;\n                    }\n                }\n            }\n\n            if (filePathToLoadOnLaunch) {\n                if (isEPUBlication(filePathToLoadOnLaunch) || isManifestJSON(filePathToLoadOnLaunch)) {\n                    await openFile(filePathToLoadOnLaunch);\n                    return;\n                } else if (!fs.lstatSync(filePathToLoadOnLaunch).isDirectory()) {\n                    await openFileDownload(filePathToLoadOnLaunch);\n                    return;\n                }\n            }\n\n            const detail = \"Note that this is only a developer application (\" +\n                \"test framework) for the Readium2 NodeJS 'streamer' and Electron-based 'navigator'.\";\n            const message = \"Use the 'Electron' menu to load publications.\";\n\n            if (process.platform === \"darwin\") {\n                const choice = dialog.showMessageBox({\n                    buttons: [\"&OK\"],\n                    cancelId: 0,\n                    defaultId: 0,\n                    detail,\n                    message,\n                    noLink: true,\n                    normalizeAccessKeys: true,\n                    title: \"Readium2 Electron streamer / navigator\",\n                    type: \"info\",\n                });\n                if (choice === 0) {\n                    debug(\"ok\");\n                }\n            } else {\n                const html = `<html><h2>${message}<hr>${detail}</h2></html>`;\n                const electronBrowserWindow = new BrowserWindow({\n                    height: 300,\n                    webPreferences: {\n                        allowRunningInsecureContent: false,\n                        contextIsolation: false,\n                        devTools: false,\n                        nodeIntegration: false,\n                        nodeIntegrationInWorker: false,\n                        sandbox: false,\n                        webSecurity: true,\n                        webviewTag: false,\n                        // preload: __dirname + \"/\" + \"preload.js\",\n                    },\n                    width: 400,\n                });\n\n                electronBrowserWindow.webContents.loadURL(\"data:text/html,\" + html);\n            }\n        });\n    })();\n});\n\nfunction resetMenu() {\n\n    const menuTemplate = [\n        {\n            label: \"Readium2 Electron\",\n            submenu: [\n                {\n                    accelerator: \"Command+Q\",\n                    click: () => { app.quit(); },\n                    label: \"Quit\",\n                },\n            ],\n        },\n        {\n            label: \"Open\",\n            submenu: [\n            ],\n        },\n        {\n            label: \"Tools\",\n            submenu: [\n                {\n                    accelerator: \"Command+B\",\n                    click: () => {\n                        // openTopLevelDevTools();\n                        openAllDevTools();\n                    },\n                    label: \"Open Dev Tools\",\n                },\n            ],\n        },\n    ];\n\n    menuTemplate[1].submenu.push({\n        click: async () => {\n            const choice = dialog.showOpenDialog({\n                defaultPath: _lastBookPath || DEFAULT_BOOK_PATH,\n                filters: [\n                    { name: \"EPUB publication\", extensions: [\"epub\", \"epub3\"] },\n                    { name: \"LCP license\", extensions: [\"lcpl\"] },\n                    { name: \"Comic book\", extensions: [\"cbz\"] },\n                    // {name: \"Zip archive\", extensions: [\"zip\"]},\n                    // {name: \"Any file\", extensions: [\"*\"]},\n                ],\n                message: \"Choose a file\",\n                properties: [\"openFile\"],\n                title: \"Load a publication\",\n            });\n            if (!choice || !choice.length) {\n                return;\n            }\n            const filePath = choice[0];\n            debug(filePath);\n            await openFileDownload(filePath);\n        },\n        label: \"Load file...\",\n    } as any);\n\n    _publicationsUrls.forEach((pubManifestUrl, n) => {\n        const filePath = _publicationsFilePaths[n];\n        debug(\"MENU ITEM: \" + filePath + \" : \" + pubManifestUrl);\n\n        menuTemplate[1].submenu.push({\n            click: async () => {\n                debug(filePath);\n                await openFileDownload(filePath);\n            },\n            label: filePath, // + \" : \" + pubManifestUrl,\n        } as any);\n    });\n    const menu = Menu.buildFromTemplate(menuTemplate);\n    Menu.setApplicationMenu(menu);\n}\n\nasync function openFileDownload(filePath: string) {\n    const dir = path.dirname(filePath);\n    _lastBookPath = dir;\n    debug(_lastBookPath);\n\n    const ext = path.extname(filePath);\n    const filename = path.basename(filePath);\n    const destFileName = filename + \".epub\";\n    if (ext === \".lcpl\") {\n        let epubFilePath: string[];\n        try {\n            epubFilePath = await downloadEPUBFromLCPL(filePath, dir, destFileName);\n        } catch (err) {\n            process.nextTick(() => {\n                const detail = (typeof err === \"string\") ?\n                    err :\n                    (err.toString ? err.toString() : \"ERROR!?\");\n                const message = \"LCP EPUB download fail!]\";\n                const res = dialog.showMessageBox({\n                    buttons: [\"&OK\"],\n                    cancelId: 0,\n                    defaultId: 0,\n                    detail,\n                    message,\n                    noLink: true,\n                    normalizeAccessKeys: true,\n                    title: \"Readium2 Electron streamer / navigator\",\n                    type: \"info\",\n                });\n                if (res === 0) {\n                    debug(\"ok\");\n                }\n            });\n            return;\n        }\n\n        const result = epubFilePath as string[];\n        process.nextTick(async () => {\n            const detail = result[0] + \" ---- [\" + result[1] + \"]\";\n            const message = \"LCP EPUB file download success [\" + destFileName + \"]\";\n            const res = dialog.showMessageBox({\n                buttons: [\"&OK\"],\n                cancelId: 0,\n                defaultId: 0,\n                detail,\n                message,\n                noLink: true,\n                normalizeAccessKeys: true,\n                title: \"Readium2 Electron streamer / navigator\",\n                type: \"info\",\n            });\n            if (res === 0) {\n                debug(\"ok\");\n            }\n\n            await openFile(result[0]);\n        });\n    } else {\n        await openFile(filePath);\n    }\n}\n\nasync function openFile(filePath: string) {\n    let n = _publicationsFilePaths.indexOf(filePath);\n    if (n < 0) {\n        if (isManifestJSON(filePath)) {\n            _publicationsFilePaths.push(filePath);\n            debug(_publicationsFilePaths);\n\n            _publicationsUrls.push(decodeURIComponent(filePath));\n            debug(_publicationsUrls);\n\n            n = _publicationsFilePaths.length - 1; // === _publicationsUrls.length - 1\n        } else {\n            const publicationPaths = _publicationsServer.addPublications([filePath]);\n            debug(publicationPaths);\n\n            _publicationsFilePaths.push(filePath);\n            debug(_publicationsFilePaths);\n\n            _publicationsUrls.push(`${_publicationsRootUrl}${publicationPaths[0]}`);\n            debug(_publicationsUrls);\n\n            n = _publicationsFilePaths.length - 1; // === _publicationsUrls.length - 1\n        }\n\n        process.nextTick(() => {\n            resetMenu();\n        });\n    }\n\n    const file = _publicationsFilePaths[n];\n    const pubManifestUrl = _publicationsUrls[n];\n\n    await createElectronBrowserWindow(file, pubManifestUrl);\n}\n\napp.on(\"activate\", () => {\n    debug(\"app activate\");\n});\n\napp.on(\"before-quit\", () => {\n    debug(\"app before quit\");\n});\n\napp.on(\"window-all-closed\", () => {\n    debug(\"app window-all-closed\");\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\n\napp.on(\"quit\", () => {\n    debug(\"app quit\");\n\n    _publicationsServer.stop();\n});\n"]}