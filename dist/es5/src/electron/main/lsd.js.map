{"version":3,"file":"lsd.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd.ts"],"names":[],"mappings":";;;AAQA,kDAAiD;AACjD,0DAAgE;AAChE,0DAAiE;AAEjE,8BAAgC;AAChC,qCAAmC;AACnC,uCAA2C;AAE3C,2CAS0B;AAE1B,IAAM,KAAK,GAAG,MAAM,CAAC,8BAA8B,CAAC,CAAC;AAErD,IAAM,MAAM,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC;AAE1F,SAAgB,iBAAiB,CAAC,kBAA0B,EAAE,eAAiC;IAA/F,iBAkEC;IAhEG,kBAAO,CAAC,EAAE,CAAC,gCAAuB,EAAE,UAChC,KAAU,EACV,OAA8C;;;;;;oBAGhC,WAAM,iBAAW,CAAC,kBAAkB,EAAE,eAAe,EAAE,OAAO,CAAC,mBAAmB,CAAC,EAAA;;oBAA7F,OAAO,GAAG,SAAmF,CAAC;oBAC1F,GAAG,SAAiB,CAAC;oBACzB,IAAI;wBACA,GAAG,GAAG,gBAAM,CAAC,WAAW,CAAM,OAAO,EAAE,SAAG,CAAC,CAAC;wBAC5C,IAAI,MAAM,EAAE;4BACR,KAAK,CAAC,GAAG,CAAC,CAAC;yBACd;qBACJ;oBAAC,OAAO,GAAG,EAAE;wBACV,KAAK,CAAC,GAAG,CAAC,CAAC;qBACd;oBACK,UAAU,GAA8C;wBAC1D,KAAK,EAAE,SAAS;wBAChB,GAAG,KAAA;wBACH,IAAI,EAAE,IAAI;qBACb,CAAC;oBACF,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,oCAA2B,EAAE,UAAU,CAAC,CAAC;;;;oBAE3D,KAAK,CAAC,KAAG,CAAC,CAAC;oBACL,UAAU,GAA8C;wBAC1D,KAAK,EAAE,KAAG;wBACV,GAAG,EAAE,SAAS;wBACd,IAAI,EAAE,KAAK;qBACd,CAAC;oBACF,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,oCAA2B,EAAE,UAAU,CAAC,CAAC;;;;;SAElE,CAAC,CAAC;IAEH,kBAAO,CAAC,EAAE,CAAC,+BAAsB,EAAE,UAC/B,KAAU,EACV,OAA6C;;;;;;oBAG/B,WAAM,gBAAU,CAAC,kBAAkB,EAAE,eAAe,EAC1D,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,UAAU,CAAC,EAAA;;oBADpD,OAAO,GAAG,SAC0C,CAAC;oBACjD,GAAG,SAAiB,CAAC;oBACzB,IAAI;wBACA,GAAG,GAAG,gBAAM,CAAC,WAAW,CAAM,OAAO,EAAE,SAAG,CAAC,CAAC;wBAC5C,IAAI,MAAM,EAAE;4BACR,KAAK,CAAC,GAAG,CAAC,CAAC;yBACd;qBACJ;oBAAC,OAAO,GAAG,EAAE;wBACV,KAAK,CAAC,GAAG,CAAC,CAAC;qBACd;oBACK,UAAU,GAA6C;wBACzD,KAAK,EAAE,SAAS;wBAChB,GAAG,KAAA;wBACH,IAAI,EAAE,IAAI;qBACb,CAAC;oBACF,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,mCAA0B,EAAE,UAAU,CAAC,CAAC;;;;oBAE1D,KAAK,CAAC,KAAG,CAAC,CAAC;oBACL,UAAU,GAA6C;wBACzD,KAAK,EAAE,KAAG;wBACV,GAAG,EAAE,SAAS;wBACd,IAAI,EAAE,KAAK;qBACd,CAAC;oBACF,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,mCAA0B,EAAE,UAAU,CAAC,CAAC;;;;;SAEjE,CAAC,CAAC;AACP,CAAC;AAlED,8CAkEC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { IDeviceIDManager } from \"@r2-lcp-js/lsd/deviceid-manager\";\nimport { LSD } from \"@r2-lcp-js/parser/epub/lsd\";\nimport { doLsdRenew } from \"@r2-navigator-js/electron/main/lsd\";\nimport { doLsdReturn } from \"@r2-navigator-js/electron/main/lsd\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\nimport { JSON as TAJSON } from \"ta-json-x\";\n\nimport {\n    IEventPayload_R2_EVENT_LCP_LSD_RENEW,\n    IEventPayload_R2_EVENT_LCP_LSD_RENEW_RES,\n    IEventPayload_R2_EVENT_LCP_LSD_RETURN,\n    IEventPayload_R2_EVENT_LCP_LSD_RETURN_RES,\n    R2_EVENT_LCP_LSD_RENEW,\n    R2_EVENT_LCP_LSD_RENEW_RES,\n    R2_EVENT_LCP_LSD_RETURN,\n    R2_EVENT_LCP_LSD_RETURN_RES,\n} from \"../common/events\";\n\nconst debug = debug_(\"r2:testapp#electron/main/lsd\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport function installLsdHandler(publicationsServer: Server, deviceIDManager: IDeviceIDManager) {\n\n    ipcMain.on(R2_EVENT_LCP_LSD_RETURN, async (\n        event: any,\n        payload: IEventPayload_R2_EVENT_LCP_LSD_RETURN) => {\n        let lsdJSON: any;\n        try {\n            lsdJSON = await doLsdReturn(publicationsServer, deviceIDManager, payload.publicationFilePath);\n            let lsd: LSD | undefined;\n            try {\n                lsd = TAJSON.deserialize<LSD>(lsdJSON, LSD);\n                if (IS_DEV) {\n                    debug(lsd);\n                }\n            } catch (err) {\n                debug(err);\n            }\n            const payloadRes: IEventPayload_R2_EVENT_LCP_LSD_RETURN_RES = {\n                error: undefined,\n                lsd,\n                okay: true,\n            };\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, payloadRes);\n        } catch (err) {\n            debug(err);\n            const payloadRes: IEventPayload_R2_EVENT_LCP_LSD_RETURN_RES = {\n                error: err,\n                lsd: undefined,\n                okay: false,\n            };\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, payloadRes);\n        }\n    });\n\n    ipcMain.on(R2_EVENT_LCP_LSD_RENEW, async (\n        event: any,\n        payload: IEventPayload_R2_EVENT_LCP_LSD_RENEW) => {\n        let lsdJSON: any;\n        try {\n            lsdJSON = await doLsdRenew(publicationsServer, deviceIDManager,\n                payload.publicationFilePath, payload.endDateStr);\n            let lsd: LSD | undefined;\n            try {\n                lsd = TAJSON.deserialize<LSD>(lsdJSON, LSD);\n                if (IS_DEV) {\n                    debug(lsd);\n                }\n            } catch (err) {\n                debug(err);\n            }\n            const payloadRes: IEventPayload_R2_EVENT_LCP_LSD_RENEW_RES = {\n                error: undefined,\n                lsd,\n                okay: true,\n            };\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, payloadRes);\n        } catch (err) {\n            debug(err);\n            const payloadRes: IEventPayload_R2_EVENT_LCP_LSD_RENEW_RES = {\n                error: err,\n                lsd: undefined,\n                okay: false,\n            };\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, payloadRes);\n        }\n    });\n}\n"]}