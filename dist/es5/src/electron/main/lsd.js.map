{"version":3,"file":"lsd.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd.ts"],"names":[],"mappings":";;;AACA,8CAAgD;AAChD,gDAAkD;AAElD,8BAAgC;AAChC,qCAAmC;AACnC,+BAAiC;AAEjC,2CAK0B;AAE1B,IAAM,KAAK,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAE7C,2BAAkC,kBAA0B,EAAE,eAAiC;IAA/F,iBAyCC;IAvCG,kBAAO,CAAC,EAAE,CAAC,gCAAuB,EAAE,UAAO,KAAU,EAAE,mBAA2B;;;;;oBAExE,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;oBAC9E,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC/D,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,oCAA2B,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAC;wBACzE,MAAM,KAAC;oBACX,CAAC;;;;oBAIuB,WAAM,kBAAS,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,EAAA;;oBAA7E,iBAAiB,GAAG,SAAyD,CAAC;oBAC9E,WAAW,CAAC,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAC;oBAC5C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,oCAA2B,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;oBAClE,WAAO;;;oBAEP,KAAK,CAAC,KAAG,CAAC,CAAC;oBACX,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,oCAA2B,EAAE,KAAK,EAAE,KAAG,CAAC,CAAC;;;;;SAElE,CAAC,CAAC;IAEH,kBAAO,CAAC,EAAE,CAAC,+BAAsB,EAAE,UAAO,KAAU,EAAE,mBAA2B,EAAE,UAAkB;;;;;oBAC3F,WAAW,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;oBAC9E,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC/D,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,mCAA0B,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAC;wBACxE,MAAM,KAAC;oBACX,CAAC;oBAEK,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;;;;oBAGpD,WAAM,gBAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,EAAA;;oBAArF,iBAAiB,GAAG,SAAiE,CAAC;oBACtF,WAAW,CAAC,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAC;oBAC5C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,mCAA0B,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;oBAChE,WAAO;;;oBAEP,KAAK,CAAC,KAAG,CAAC,CAAC;oBACX,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,mCAA0B,EAAE,KAAK,EAAE,KAAG,CAAC,CAAC;;;;;SAEjE,CAAC,CAAC;AACP,CAAC;AAzCD,8CAyCC","sourcesContent":["import { IDeviceIDManager } from \"@r2-lcp-js/lsd/deviceid-manager\";\nimport { lsdRenew } from \"@r2-lcp-js/lsd/renew\";\nimport { lsdReturn } from \"@r2-lcp-js/lsd/return\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\nimport * as moment from \"moment\";\n\nimport {\n    R2_EVENT_LCP_LSD_RENEW,\n    R2_EVENT_LCP_LSD_RENEW_RES,\n    R2_EVENT_LCP_LSD_RETURN,\n    R2_EVENT_LCP_LSD_RETURN_RES,\n} from \"../common/events\";\n\nconst debug = debug_(\"r2:electron:main:lsd\");\n\nexport function installLsdHandler(publicationsServer: Server, deviceIDManager: IDeviceIDManager) {\n\n    ipcMain.on(R2_EVENT_LCP_LSD_RETURN, async (event: any, publicationFilePath: string) => {\n\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, false, \"Internal error!\");\n            return;\n        }\n\n        let renewResponseJson: any;\n        try {\n            renewResponseJson = await lsdReturn(publication.LCP.LSDJson, deviceIDManager);\n            publication.LCP.LSDJson = renewResponseJson;\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, true, \"Returned.\");\n            return;\n        } catch (err) {\n            debug(err);\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, false, err);\n        }\n    });\n\n    ipcMain.on(R2_EVENT_LCP_LSD_RENEW, async (event: any, publicationFilePath: string, endDateStr: string) => {\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, false, \"Internal error!\");\n            return;\n        }\n\n        const endDate = endDateStr.length ? moment(endDateStr).toDate() : undefined;\n        let renewResponseJson: any;\n        try {\n            renewResponseJson = await lsdRenew(endDate, publication.LCP.LSDJson, deviceIDManager);\n            publication.LCP.LSDJson = renewResponseJson;\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, true, \"Renewed.\");\n            return;\n        } catch (err) {\n            debug(err);\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, false, err);\n        }\n    });\n}\n"]}