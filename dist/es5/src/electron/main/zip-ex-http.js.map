{"version":3,"file":"zip-ex-http.js","sourceRoot":"","sources":["../../../../../src/electron/main/zip-ex-http.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { PassThrough } from \"stream\";\n\nimport { IStreamAndLength, IZip, Zip } from \"@r2-utils-js/_utils/zip/zip\";\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\n\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:testapp#electron/main/zip-ex-manifest-json\");\n\nexport class ZipExplodedHTTP extends Zip {\n\n    public static async loadPromise(dirPath: string): Promise<IZip> {\n        return Promise.resolve(new ZipExplodedHTTP(dirPath));\n    }\n\n    private constructor(readonly dirPath: string) {\n        super();\n        debug(`ZipExplodedHTTP: ${dirPath}`);\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: ZipExplodedHTTP -- \" + this.dirPath);\n    }\n\n    public entriesCount(): number {\n        return 0; // TODO: hacky! (not really needed ... but still)\n    }\n\n    public hasEntries(): boolean {\n        return true; // TODO: hacky\n    }\n\n    public hasEntry(_entryPath: string): boolean {\n        return true; // TODO: hacky\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        return new Promise<string[]>(async (_resolve, reject) => {\n            reject(\"Not implemented.\");\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip exploded: \" + entryPath);\n        }\n        const url = this.dirPath + \"/\" + entryPath;\n\n        debug(`URL: ${url}`);\n\n        return new Promise(async (topresolve, topreject) => {\n\n            const failure = async (err: any) => {\n                debug(err);\n                topreject(err);\n            };\n\n            const success = async (response: request.RequestResponse) => {\n\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n\n                // debug(response);\n                // debug(response.body);\n\n                if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    await failure(\"HTTP CODE \" + response.statusCode);\n                    return;\n                }\n\n                let length = 0;\n                const lengthStr = response.headers[\"content-length\"];\n                if (lengthStr) {\n                    length = parseInt(lengthStr, 10);\n                }\n\n                const stream = new PassThrough();\n                response.pipe(stream);\n\n                const streamAndLength: IStreamAndLength = {\n                    length,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                topresolve(streamAndLength);\n\n                // let responseStr: string;\n                // if (response.body) {\n                //     debug(\"RES BODY\");\n                //     responseStr = response.body;\n                // } else {\n                //     debug(\"RES STREAM\");\n                //     let responseData: Buffer;\n                //     try {\n                //         responseData = await streamToBufferPromise(response);\n                //     } catch (err) {\n                //         debug(err);\n                //         return;\n                //     }\n                //     responseStr = responseData.toString(\"utf8\");\n                // }\n            };\n\n            // No response streaming! :(\n            // https://github.com/request/request-promise/issues/90\n            const needsStreamingResponse = true;\n\n            if (needsStreamingResponse) {\n                const promise = new Promise((resolve, reject) => {\n                    request.get({\n                        headers: {},\n                        method: \"GET\",\n                        uri: url,\n                    })\n                        .on(\"response\", async (response: request.RequestResponse) => {\n                            await success(response);\n                            resolve();\n                        })\n                        .on(\"error\", async (err: any) => {\n                            await failure(err);\n                            reject();\n                        });\n                });\n                try {\n                    await promise;\n                } catch (err) {\n                    // ignore\n                }\n            } else {\n                let response: requestPromise.FullResponse;\n                try {\n                    // tslint:disable-next-line:await-promise no-floating-promises\n                    response = await requestPromise({\n                        headers: {},\n                        method: \"GET\",\n                        resolveWithFullResponse: true,\n                        uri: url,\n                    });\n                    await success(response);\n                } catch (err) {\n                    await failure(err);\n                }\n            }\n        });\n    }\n}\n"]}