{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/electron/main/index.ts"],"names":[],"mappings":"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","sourcesContent":["// https://github.com/electron/electron/blob/master/docs/api/sandbox-option.md\n// https://github.com/electron/electron/blob/master/docs/api/process.md\n// https://github.com/electron/electron/blob/master/docs/api/browser-window.md\n// https://github.com/electron/electron/blob/master/docs/api/protocol.md\n// https://github.com/electron/electron/blob/master/docs/api/web-frame.md\n// https://github.com/electron/electron/blob/master/docs/api/web-contents.md\n// https://github.com/electron/electron/blob/master/docs/api/web-request.md\n// https://github.com/electron/electron/blob/master/docs/api/session.md\n// https://github.com/electron/electron/blob/master/docs/api/webview-tag.md\n// https://github.com/electron/electron/blob/master/docs/api/browser-view.md\n// https://github.com/electron/electron/blob/master/docs/api/client-request.md\n// https://github.com/electron/electron/blob/master/docs/api/sandbox-option.md\n// https://github.com/electron/electron/blob/master/docs/api/dialog.md\n// https://github.com/electron/electron/blob/master/docs/api/ipc-renderer.md\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { launchStatusDocumentProcessing } from \"@r2-lcp-js/lsd/status-document-processing\";\nimport { setLcpNativePluginPath } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { downloadEPUBFromLCPL } from \"@r2-lcp-js/publication-download\";\nimport { convertHttpUrlToCustomScheme } from \"@r2-navigator-js/electron/common/sessions\";\nimport { trackBrowserWindow } from \"@r2-navigator-js/electron/main/browser-window-tracker\";\nimport { lsdLcpUpdateInject } from \"@r2-navigator-js/electron/main/lsd-injectlcpl\";\nimport { setupReadiumCSS } from \"@r2-navigator-js/electron/main/readium-css\";\nimport { initSessions, secureSessions } from \"@r2-navigator-js/electron/main/sessions\";\nimport { initGlobals } from \"@r2-shared-js/init-globals\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport { encodeURIComponent_RFC3986 } from \"@utils/http/UrlUtils\";\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport * as debug_ from \"debug\";\nimport { BrowserWindow, Menu, app, dialog, ipcMain, webContents } from \"electron\";\nimport * as express from \"express\";\nimport * as filehound from \"filehound\";\nimport * as portfinder from \"portfinder\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport { R2_EVENT_DEVTOOLS } from \"../common/events\";\nimport { IStore } from \"../common/store\";\nimport { StoreElectron } from \"../common/store-electron\";\nimport { installLcpHandler } from \"./lcp\";\nimport { installLsdHandler } from \"./lsd\";\nimport { getDeviceIDManager } from \"./lsd-deviceid-manager\";\n\nconst electronStoreLSD: IStore = new StoreElectron(\"readium2-testapp-lsd\", {});\nconst deviceIDManager = getDeviceIDManager(electronStoreLSD, \"Readium2 Electron desktop app\");\n\n// import * as mime from \"mime-types\";\n\ninitGlobals();\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nconst lcpPluginPath = IS_DEV ?\n    path.join(process.cwd(), \"LCP\", \"lcp.node\") :\n    path.join(__dirname, \"lcp.node\");\nsetLcpNativePluginPath(lcpPluginPath);\n\nconst debug = debug_(\"r2:testapp#electron/main/index\");\n\nlet _publicationsServer: Server;\nlet _publicationsServerPort: number;\nlet _publicationsRootUrl: string;\nlet _publicationsFilePaths: string[];\nlet _publicationsUrls: string[];\n\nlet DEFAULT_BOOK_PATH = path.join(IS_DEV ? process.cwd() : __dirname, \"misc\", \"epubs\");\ndebug(DEFAULT_BOOK_PATH);\nif (fs.existsSync(DEFAULT_BOOK_PATH)) {\n    debug(\"DEFAULT_BOOK_PATH => exists\");\n    DEFAULT_BOOK_PATH = fs.realpathSync(path.resolve(DEFAULT_BOOK_PATH));\n    debug(DEFAULT_BOOK_PATH);\n} else {\n    debug(\"DEFAULT_BOOK_PATH => missing\");\n    DEFAULT_BOOK_PATH = \".\";\n}\n\nlet _lastBookPath: string | undefined;\n\n// protocol.registerStandardSchemes([\"epub\", \"file\"], { secure: true });\n\nfunction openAllDevTools() {\n    for (const wc of webContents.getAllWebContents()) {\n        // if (wc.hostWebContents &&\n        //     wc.hostWebContents.id === electronBrowserWindow.webContents.id) {\n        // }\n        wc.openDevTools();\n    }\n}\n\n// function openTopLevelDevTools() {\n//     const bw = BrowserWindow.getFocusedWindow();\n//     if (bw) {\n//         bw.webContents.openDevTools();\n//     } else {\n//         const arr = BrowserWindow.getAllWindows();\n//         arr.forEach((bww) => {\n//             bww.webContents.openDevTools();\n//         });\n//     }\n// }\n\nipcMain.on(R2_EVENT_DEVTOOLS, (_event: any, _arg: any) => {\n    openAllDevTools();\n});\n\nasync function createElectronBrowserWindow(publicationFilePath: string, publicationUrl: string) {\n\n    debug(\"createElectronBrowserWindow() \" + publicationFilePath + \" : \" + publicationUrl);\n\n    let lcpHint: string | undefined;\n    let publication: Publication | undefined;\n\n    if (publicationFilePath.indexOf(\"http\") === 0 &&\n        publicationFilePath.endsWith(\".json\") // TODO: hacky!\n    ) {\n        const failure = async (err: any) => {\n            debug(err);\n        };\n\n        const successLCP = async (response: request.RequestResponse, pub: Publication) => {\n\n            // Object.keys(response.headers).forEach((header: string) => {\n            //     debug(header + \" => \" + response.headers[header]);\n            // });\n\n            // debug(response);\n            // debug(response.body);\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                await failure(\"HTTP CODE \" + response.statusCode);\n                return;\n            }\n\n            let responseStr: string;\n            if (response.body) {\n                debug(\"RES BODY\");\n                responseStr = response.body;\n            } else {\n                debug(\"RES STREAM\");\n                let responseData: Buffer;\n                try {\n                    responseData = await streamToBufferPromise(response);\n                } catch (err) {\n                    debug(err);\n                    return;\n                }\n                responseStr = responseData.toString(\"utf8\");\n            }\n\n            const responseJson = global.JSON.parse(responseStr);\n            debug(responseJson);\n\n            let lcpl: LCP | undefined;\n            lcpl = TAJSON.deserialize<LCP>(responseJson, LCP);\n            lcpl.ZipPath = \"META-INF/license.lcpl\";\n            lcpl.JsonSource = responseStr;\n            lcpl.init();\n\n            // breakLength: 100  maxArrayLength: undefined\n            // console.log(util.inspect(lcpl,\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n            pub.LCP = lcpl;\n            publicationUrl = publicationUrl.replace(\"/pub/\",\n                \"/pub/\" + _publicationsServer.lcpBeginToken +\n                \"URL_LCP_PASS_PLACEHOLDER\" + _publicationsServer.lcpEndToken);\n            debug(publicationUrl);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            // Object.keys(response.headers).forEach((header: string) => {\n            //     debug(header + \" => \" + response.headers[header]);\n            // });\n\n            // debug(response);\n            // debug(response.body);\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                await failure(\"HTTP CODE \" + response.statusCode);\n                return;\n            }\n\n            let responseStr: string;\n            if (response.body) {\n                debug(\"RES BODY\");\n                responseStr = response.body;\n            } else {\n                debug(\"RES STREAM\");\n                let responseData: Buffer;\n                try {\n                    responseData = await streamToBufferPromise(response);\n                } catch (err) {\n                    debug(err);\n                    return;\n                }\n                responseStr = responseData.toString(\"utf8\");\n            }\n\n            const responseJson = global.JSON.parse(responseStr);\n            debug(responseJson);\n\n            try {\n                publication = TAJSON.deserialize<Publication>(responseJson, Publication);\n            } catch (erorz) {\n                debug(erorz);\n                return;\n            }\n            debug(publication);\n\n            const pathBase64 = decodeURIComponent(publicationFilePath.replace(/.*\\/pub\\/(.*)\\/manifest.json/, \"$1\"));\n            debug(pathBase64);\n            const pathDecoded = new Buffer(pathBase64, \"base64\").toString(\"utf8\");\n            debug(pathDecoded);\n            // const pathFileName = pathDecoded.substr(\n            //     pathDecoded.replace(/\\\\/g, \"/\").lastIndexOf(\"/\") + 1,\n            //     pathDecoded.length - 1);\n            // debug(pathFileName);\n            debug(\"ADDED HTTP pub to server cache: \" + pathDecoded + \" --- \" + publicationFilePath);\n            _publicationsServer.cachePublication(pathDecoded, publication);\n            const pubCheck = _publicationsServer.cachedPublication(pathDecoded);\n            if (!pubCheck) {\n                debug(\"PUB CHECK FAIL?\");\n            }\n\n            if (publication.Links) {\n                const licenseLink = publication.Links.find((link) => {\n                    return link.Rel.indexOf(\"license\") >= 0 &&\n                        link.TypeLink === \"application/vnd.readium.lcp.license.v1.0+json\";\n                });\n                if (licenseLink && licenseLink.Href) {\n                    // const lcplHref = publicationFilePath + \"/../\" + licenseLink.Href;\n                    const lcplHref = publicationFilePath.replace(\"manifest.json\", licenseLink.Href);\n                    debug(lcplHref);\n\n                    // No response streaming! :(\n                    // https://github.com/request/request-promise/issues/90\n                    // const needsStreamingResponse = true;\n                    if (needsStreamingResponse) {\n                        const promise = new Promise((resolve, reject) => {\n                            request.get({\n                                headers: {},\n                                method: \"GET\",\n                                uri: lcplHref,\n                            })\n                                .on(\"response\", async (responsez: request.RequestResponse) => {\n                                    await successLCP(responsez, publication as Publication);\n                                    resolve();\n                                })\n                                .on(\"error\", async (err: any) => {\n                                    await failure(err);\n                                    reject();\n                                });\n                        });\n                        try {\n                            await promise;\n                        } catch (err) {\n                            return;\n                        }\n                    } else {\n                        let responsez: requestPromise.FullResponse;\n                        try {\n                            // tslint:disable-next-line:await-promise no-floating-promises\n                            responsez = await requestPromise({\n                                headers: {},\n                                method: \"GET\",\n                                resolveWithFullResponse: true,\n                                uri: lcplHref,\n                            });\n                        } catch (err) {\n                            await failure(err);\n                            return;\n                        }\n                        await successLCP(responsez, publication);\n                    }\n                }\n            }\n        };\n\n        // No response streaming! :(\n        // https://github.com/request/request-promise/issues/90\n        const needsStreamingResponse = true;\n        if (needsStreamingResponse) {\n            const promise = new Promise((resolve, reject) => {\n                request.get({\n                    headers: {},\n                    method: \"GET\",\n                    uri: publicationFilePath,\n                })\n                    .on(\"response\", async (response: request.RequestResponse) => {\n                        await success(response);\n                        resolve();\n                    })\n                    .on(\"error\", async (err: any) => {\n                        await failure(err);\n                        reject();\n                    });\n            });\n            try {\n                await promise;\n            } catch (err) {\n                return;\n            }\n        } else {\n            let response: requestPromise.FullResponse;\n            try {\n                // tslint:disable-next-line:await-promise no-floating-promises\n                response = await requestPromise({\n                    headers: {},\n                    method: \"GET\",\n                    resolveWithFullResponse: true,\n                    uri: publicationFilePath,\n                });\n            } catch (err) {\n                await failure(err);\n                return;\n            }\n            await success(response);\n        }\n    } else if (publicationFilePath.indexOf(\"http\") !== 0 ||\n        publicationFilePath.endsWith(\".epub\")) {\n\n        // const fileName = path.basename(publicationFilePath);\n        // const ext = path.extname(fileName).toLowerCase();\n\n        try {\n            publication = await _publicationsServer.loadOrGetCachedPublication(publicationFilePath);\n        } catch (err) {\n            debug(err);\n            return;\n        }\n    }\n\n    if (publication && publication.LCP) {\n        debug(publication.LCP);\n\n        try {\n            await launchStatusDocumentProcessing(publication.LCP, deviceIDManager,\n                async (licenseUpdateJson: string | undefined) => {\n                    debug(\"launchStatusDocumentProcessing DONE.\");\n\n                    if (licenseUpdateJson) {\n                        let res: string;\n                        try {\n                            res = await lsdLcpUpdateInject(\n                                licenseUpdateJson,\n                                publication as Publication,\n                                publicationFilePath);\n                            debug(\"EPUB SAVED: \" + res);\n                        } catch (err) {\n                            debug(err);\n                        }\n                    }\n                });\n        } catch (err) {\n            debug(err);\n        }\n\n        if (publication.LCP.Encryption &&\n            publication.LCP.Encryption.UserKey &&\n            publication.LCP.Encryption.UserKey.TextHint) {\n            lcpHint = publication.LCP.Encryption.UserKey.TextHint;\n        }\n        if (!lcpHint) {\n            lcpHint = \"LCP passphrase\";\n        }\n    }\n\n    const electronBrowserWindow = new BrowserWindow({\n        height: 600,\n        webPreferences: {\n            allowRunningInsecureContent: false,\n            contextIsolation: false,\n            devTools: true,\n            nodeIntegration: true,\n            nodeIntegrationInWorker: false,\n            sandbox: false,\n            webSecurity: true,\n            webviewTag: true,\n            // preload: __dirname + \"/\" + \"preload.js\",\n        },\n        width: 800,\n    });\n    trackBrowserWindow(electronBrowserWindow);\n\n    // electronBrowserWindow.on(\"resize\", () => {\n    //     const [width, height] = electronBrowserWindow.getContentSize();\n\n    //     for (const wc of webContents.getAllWebContents()) {\n    //         if (wc.hostWebContents &&\n    //             wc.hostWebContents.id === electronBrowserWindow.webContents.id) {\n    //             wc.setSize({\n    //                 normal: {\n    //                     height: 400,\n    //                     width,\n    //                 },\n    //             });\n    //         }\n    //     }\n    // });\n\n    electronBrowserWindow.webContents.on(\"dom-ready\", () => {\n        debug(\"electronBrowserWindow dom-ready \" + publicationFilePath + \" : \" + publicationUrl);\n        // electronBrowserWindow.webContents.openDevTools();\n    });\n\n    if (publicationFilePath.indexOf(\"http\") !== 0) {\n        // This triggers the origin-sandbox for localStorage, etc.\n        publicationUrl = convertHttpUrlToCustomScheme(publicationUrl);\n    }\n\n    const urlEncoded = encodeURIComponent_RFC3986(publicationUrl);\n    let htmlPath = IS_DEV ? `${__dirname}/../renderer/index.html` : `${__dirname}/index.html`;\n    htmlPath = htmlPath.replace(/\\\\/g, \"/\");\n    let fullUrl = `file://${htmlPath}?pub=${urlEncoded}`;\n    if (lcpHint) {\n        fullUrl = fullUrl + \"&lcpHint=\" + encodeURIComponent_RFC3986(lcpHint);\n    }\n    // fullUrl = fullUrl + \"&lcpPlugin=\" + encodeURIComponent_RFC3986(Buffer.from(lcpPluginPath).toString(\"base64\"));\n\n    const urlRoot = _publicationsServer.serverUrl() as string;\n    fullUrl = fullUrl + \"&pubServerRoot=\" + encodeURIComponent_RFC3986(urlRoot);\n\n    // `file://${process.cwd()}/src/electron/renderer/index.html`;\n    // `file://${__dirname}/../../../../src/electron/renderer/index.html`\n    debug(fullUrl);\n    electronBrowserWindow.webContents.loadURL(fullUrl, { extraHeaders: \"pragma: no-cache\\n\" });\n}\n\ninitSessions();\n\napp.on(\"ready\", () => {\n    debug(\"app ready\");\n\n    // protocol.registerServiceWorkerSchemes([\"epub\"]);\n\n    // registerFileProtocol\n    // protocol.registerBufferProtocol(\"epub\",\n    //     (request, callback) => {\n    //         debug(request.url);\n    //         const data = fs.readFileSync(request.url);\n    //         const mimeType = mime.lookup(request.url);\n    //         callback({ data, mimeType });\n    //     }, (error) => {\n    //         debug(error);\n    //     });\n\n    // tslint:disable-next-line:no-floating-promises\n    (async () => {\n        try {\n            _publicationsFilePaths = await filehound.create()\n                .depth(0)\n                .ignoreHiddenDirectories()\n                .ignoreHiddenFiles()\n                // .discard(\"node_modules\")\n                // .discard(\".*.asar\")\n                .paths(DEFAULT_BOOK_PATH)\n                .ext([\".epub\", \".epub3\", \".cbz\", \".lcpl\"])\n                .find();\n        } catch (err) {\n            debug(err);\n        }\n        debug(_publicationsFilePaths);\n\n        _publicationsServer = new Server({\n            disableDecryption: false,\n            disableOPDS: true,\n            disableReaders: true,\n            disableRemotePubUrl: true,\n        });\n\n        secureSessions(_publicationsServer); // port 443 ==> HTTPS\n\n        installLcpHandler(_publicationsServer);\n        installLsdHandler(_publicationsServer, deviceIDManager);\n\n        const readiumCSSPath = IS_DEV ?\n            path.join(process.cwd(), \"dist\", \"ReadiumCSS\").replace(/\\\\/g, \"/\") :\n            path.join(__dirname, \"ReadiumCSS\").replace(/\\\\/g, \"/\");\n\n        setupReadiumCSS(_publicationsServer, readiumCSSPath);\n\n        // For the webview preload sourcemaps (local file URL)\n        if (IS_DEV) {\n            let preloadPath = \"FOLDER_PATH_TO/preload.js\";\n            // TODO: REEEALLY HACKY! (and does not work in release bundle mode, only with dist/ exploded code)\n            let distTarget: string | undefined;\n            const dirnameSlashed = __dirname.replace(/\\\\/g, \"/\");\n            if (dirnameSlashed.indexOf(\"/dist/es5\") > 0) {\n                distTarget = \"es5\";\n            } else if (dirnameSlashed.indexOf(\"/dist/es6-es2015\") > 0) {\n                distTarget = \"es6-es2015\";\n            } else if (dirnameSlashed.indexOf(\"/dist/es7-es2016\") > 0) {\n                distTarget = \"es7-es2016\";\n            } else if (dirnameSlashed.indexOf(\"/dist/es8-es2017\") > 0) {\n                distTarget = \"es8-es2017\";\n            }\n            if (distTarget) {\n                preloadPath = path.join(process.cwd(),\n                    \"node_modules/r2-navigator-js/dist/\" +\n                    distTarget); // + \"/src/electron/renderer/webview/preload.js\"\n            }\n            preloadPath = preloadPath.replace(/\\\\/g, \"/\");\n            console.log(preloadPath);\n            // https://expressjs.com/en/4x/api.html#express.static\n            const staticOptions = {\n                dotfiles: \"ignore\",\n                etag: true,\n                fallthrough: false,\n                immutable: true,\n                index: false,\n                maxAge: \"1d\",\n                redirect: false,\n                // extensions: [\"css\", \"otf\"],\n                // setHeaders: function (res, path, stat) {\n                //   res.set('x-timestamp', Date.now())\n                // }\n            };\n            _publicationsServer.expressUse(preloadPath, express.static(preloadPath, staticOptions));\n        }\n\n        // _publicationsServer.expressGet([\"/resize-sensor.js\"],\n        //     (req: express.Request, res: express.Response) => {\n\n        //         const swPth = \"./renderer/ResizeSensor.js\";\n        //         const swFullPath = path.resolve(path.join(__dirname, swPth));\n        //         if (!fs.existsSync(swFullPath)) {\n\n        //             const err = \"Missing ResizeSensor JS! \";\n        //             debug(err + swFullPath);\n        //             res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n        //                 + err + \"</p></body></html>\");\n        //             return;\n        //         }\n\n        //         const swJS = fs.readFileSync(swFullPath, { encoding: \"utf8\" });\n        //         // debug(swJS);\n\n        //         // this.setResponseCORS(res);\n        //         res.set(\"Content-Type\", \"text/javascript; charset=utf-8\");\n\n        //         const checkSum = crypto.createHash(\"sha256\");\n        //         checkSum.update(swJS);\n        //         const hash = checkSum.digest(\"hex\");\n\n        //         const match = req.header(\"If-None-Match\");\n        //         if (match === hash) {\n        //             debug(\"ResizeSensor.js cache\");\n        //             res.status(304); // StatusNotModified\n        //             res.end();\n        //             return;\n        //         }\n\n        //         res.setHeader(\"ETag\", hash);\n        //         // res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n        //         res.status(200).send(swJS);\n        //     });\n\n        // _publicationsServer.expressGet([\"/sw.js\"],\n        //     (req: express.Request, res: express.Response) => {\n\n        //         const swPth = \"./renderer/sw/service-worker.js\";\n        //         const swFullPath = path.resolve(path.join(__dirname, swPth));\n        //         if (!fs.existsSync(swFullPath)) {\n\n        //             const err = \"Missing Service Worker JS! \";\n        //             debug(err + swFullPath);\n        //             res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n        //                 + err + \"</p></body></html>\");\n        //             return;\n        //         }\n\n        //         const swJS = fs.readFileSync(swFullPath, { encoding: \"utf8\" });\n        //         // debug(swJS);\n\n        //         // this.setResponseCORS(res);\n        //         res.set(\"Content-Type\", \"text/javascript; charset=utf-8\");\n\n        //         const checkSum = crypto.createHash(\"sha256\");\n        //         checkSum.update(swJS);\n        //         const hash = checkSum.digest(\"hex\");\n\n        //         const match = req.header(\"If-None-Match\");\n        //         if (match === hash) {\n        //             debug(\"service-worker.js cache\");\n        //             res.status(304); // StatusNotModified\n        //             res.end();\n        //             return;\n        //         }\n\n        //         res.setHeader(\"ETag\", hash);\n        //         // res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n        //         res.status(200).send(swJS);\n        //     });\n\n        const pubPaths = _publicationsServer.addPublications(_publicationsFilePaths);\n\n        try {\n            _publicationsServerPort = await portfinder.getPortPromise();\n        } catch (err) {\n            debug(err);\n        }\n\n        // Force HTTPS, see secureSessions()\n        // const serverInfo =\n        await _publicationsServer.start(_publicationsServerPort, true);\n        // debug(serverInfo);\n\n        _publicationsRootUrl = _publicationsServer.serverUrl() as string;\n        debug(_publicationsRootUrl);\n\n        _publicationsUrls = pubPaths.map((pubPath) => {\n            return `${_publicationsRootUrl}${pubPath}`;\n        });\n        debug(_publicationsUrls);\n\n        resetMenu();\n\n        process.nextTick(async () => {\n\n            const args = process.argv.slice(2);\n            debug(\"args:\");\n            debug(args);\n            let filePathToLoadOnLaunch: string | undefined;\n            if (args && args.length && args[0]) {\n                const argPath = args[0].trim();\n                let filePath = argPath;\n                debug(filePath);\n                if (filePath.indexOf(\"http\") === 0) {\n                    await openFile(filePath);\n                    return;\n                } else {\n                    if (!fs.existsSync(filePath)) {\n                        filePath = path.join(__dirname, argPath);\n                        debug(filePath);\n                        if (!fs.existsSync(filePath)) {\n                            filePath = path.join(process.cwd(), argPath);\n                            debug(filePath);\n                            if (!fs.existsSync(filePath)) {\n                                debug(\"FILEPATH DOES NOT EXIST: \" + filePath);\n                            } else {\n                                filePathToLoadOnLaunch = filePath;\n                            }\n                        } else {\n                            filePathToLoadOnLaunch = filePath;\n                        }\n                    } else {\n                        filePath = fs.realpathSync(filePath);\n                        debug(filePath);\n                        filePathToLoadOnLaunch = filePath;\n                    }\n                }\n            }\n\n            if (filePathToLoadOnLaunch) {\n                await openFileDownload(filePathToLoadOnLaunch);\n                return;\n            }\n\n            const detail = \"Note that this is only a developer application (\" +\n                \"test framework) for the Readium2 NodeJS 'streamer' and Electron-based 'navigator'.\";\n            const message = \"Use the 'Electron' menu to load publications.\";\n\n            if (process.platform === \"darwin\") {\n                const choice = dialog.showMessageBox({\n                    buttons: [\"&OK\"],\n                    cancelId: 0,\n                    defaultId: 0,\n                    detail,\n                    message,\n                    noLink: true,\n                    normalizeAccessKeys: true,\n                    title: \"Readium2 Electron streamer / navigator\",\n                    type: \"info\",\n                });\n                if (choice === 0) {\n                    debug(\"ok\");\n                }\n            } else {\n                const html = `<html><h2>${message}<hr>${detail}</h2></html>`;\n                const electronBrowserWindow = new BrowserWindow({\n                    height: 300,\n                    webPreferences: {\n                        allowRunningInsecureContent: false,\n                        contextIsolation: false,\n                        devTools: false,\n                        nodeIntegration: false,\n                        nodeIntegrationInWorker: false,\n                        sandbox: false,\n                        webSecurity: true,\n                        webviewTag: false,\n                        // preload: __dirname + \"/\" + \"preload.js\",\n                    },\n                    width: 400,\n                });\n\n                electronBrowserWindow.webContents.loadURL(\"data:text/html,\" + html);\n            }\n        });\n    })();\n});\n\nfunction resetMenu() {\n\n    const menuTemplate = [\n        {\n            label: \"Readium2 Electron\",\n            submenu: [\n                {\n                    accelerator: \"Command+Q\",\n                    click: () => { app.quit(); },\n                    label: \"Quit\",\n                },\n            ],\n        },\n        {\n            label: \"Open\",\n            submenu: [\n            ],\n        },\n        {\n            label: \"Tools\",\n            submenu: [\n                {\n                    accelerator: \"Command+B\",\n                    click: () => {\n                        // openTopLevelDevTools();\n                        openAllDevTools();\n                    },\n                    label: \"Open Dev Tools\",\n                },\n            ],\n        },\n    ];\n\n    menuTemplate[1].submenu.push({\n        click: async () => {\n            const choice = dialog.showOpenDialog({\n                defaultPath: _lastBookPath || DEFAULT_BOOK_PATH,\n                filters: [\n                    { name: \"EPUB publication\", extensions: [\"epub\", \"epub3\"] },\n                    { name: \"LCP license\", extensions: [\"lcpl\"] },\n                    { name: \"Comic book\", extensions: [\"cbz\"] },\n                    // {name: \"Zip archive\", extensions: [\"zip\"]},\n                    // {name: \"Any file\", extensions: [\"*\"]},\n                ],\n                message: \"Choose a file\",\n                properties: [\"openFile\"],\n                title: \"Load a publication\",\n            });\n            if (!choice || !choice.length) {\n                return;\n            }\n            const filePath = choice[0];\n            debug(filePath);\n            await openFileDownload(filePath);\n        },\n        label: \"Load file...\",\n    } as any);\n\n    _publicationsUrls.forEach((pubManifestUrl, n) => {\n        const filePath = _publicationsFilePaths[n];\n        debug(\"MENU ITEM: \" + filePath + \" : \" + pubManifestUrl);\n\n        menuTemplate[1].submenu.push({\n            click: async () => {\n                debug(filePath);\n                await openFileDownload(filePath);\n            },\n            label: filePath, // + \" : \" + pubManifestUrl,\n        } as any);\n    });\n    const menu = Menu.buildFromTemplate(menuTemplate);\n    Menu.setApplicationMenu(menu);\n}\n\nasync function openFileDownload(filePath: string) {\n    const dir = path.dirname(filePath);\n    _lastBookPath = dir;\n    debug(_lastBookPath);\n\n    const ext = path.extname(filePath);\n    const filename = path.basename(filePath);\n    const destFileName = filename + \".epub\";\n    if (ext === \".lcpl\") {\n        let epubFilePath: string[];\n        try {\n            epubFilePath = await downloadEPUBFromLCPL(filePath, dir, destFileName);\n        } catch (err) {\n            process.nextTick(() => {\n                const detail = (typeof err === \"string\") ?\n                    err :\n                    (err.toString ? err.toString() : \"ERROR!?\");\n                const message = \"LCP EPUB download fail!]\";\n                const res = dialog.showMessageBox({\n                    buttons: [\"&OK\"],\n                    cancelId: 0,\n                    defaultId: 0,\n                    detail,\n                    message,\n                    noLink: true,\n                    normalizeAccessKeys: true,\n                    title: \"Readium2 Electron streamer / navigator\",\n                    type: \"info\",\n                });\n                if (res === 0) {\n                    debug(\"ok\");\n                }\n            });\n            return;\n        }\n\n        const result = epubFilePath as string[];\n        process.nextTick(async () => {\n            const detail = result[0] + \" ---- [\" + result[1] + \"]\";\n            const message = \"LCP EPUB file download success [\" + destFileName + \"]\";\n            const res = dialog.showMessageBox({\n                buttons: [\"&OK\"],\n                cancelId: 0,\n                defaultId: 0,\n                detail,\n                message,\n                noLink: true,\n                normalizeAccessKeys: true,\n                title: \"Readium2 Electron streamer / navigator\",\n                type: \"info\",\n            });\n            if (res === 0) {\n                debug(\"ok\");\n            }\n\n            await openFile(result[0]);\n        });\n    } else {\n        await openFile(filePath);\n    }\n}\n\nasync function openFile(filePath: string) {\n    let n = _publicationsFilePaths.indexOf(filePath);\n    if (n < 0) {\n        if (filePath.indexOf(\"http\") === 0 &&\n            filePath.endsWith(\".json\") // TODO: hacky!\n        ) {\n            _publicationsFilePaths.push(filePath);\n            debug(_publicationsFilePaths);\n\n            _publicationsUrls.push(decodeURIComponent(filePath));\n            debug(_publicationsUrls);\n\n            n = _publicationsFilePaths.length - 1; // === _publicationsUrls.length - 1\n        } else {\n            const publicationPaths = _publicationsServer.addPublications([filePath]);\n            debug(publicationPaths);\n\n            _publicationsFilePaths.push(filePath);\n            debug(_publicationsFilePaths);\n\n            _publicationsUrls.push(`${_publicationsRootUrl}${publicationPaths[0]}`);\n            debug(_publicationsUrls);\n\n            n = _publicationsFilePaths.length - 1; // === _publicationsUrls.length - 1\n        }\n\n        process.nextTick(() => {\n            resetMenu();\n        });\n    }\n\n    const file = _publicationsFilePaths[n];\n    const pubManifestUrl = _publicationsUrls[n];\n\n    await createElectronBrowserWindow(file, pubManifestUrl);\n}\n\napp.on(\"activate\", () => {\n    debug(\"app activate\");\n});\n\napp.on(\"before-quit\", () => {\n    debug(\"app before quit\");\n});\n\napp.on(\"window-all-closed\", () => {\n    debug(\"app window-all-closed\");\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\n\napp.on(\"quit\", () => {\n    debug(\"app quit\");\n\n    _publicationsServer.stop();\n});\n"]}