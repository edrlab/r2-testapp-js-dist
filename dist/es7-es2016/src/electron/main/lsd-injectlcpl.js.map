{"version":3,"file":"lsd-injectlcpl.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd-injectlcpl.ts"],"names":[],"mappings":";;;AAAA,yBAAyB;AAGzB,oDAAiD;AACjD,wDAA2D;AAC3D,gCAAgC;AAChC,qCAAyC;AAEzC,MAAM,KAAK,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAE7C,4BACI,OAAe,EACf,WAAwB,EACxB,eAAuB;;QAEvB,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5C,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEhB,MAAM,YAAY,GAAG,uBAAuB,CAAC;QAE7C,IAAI,IAAS,CAAC;QACd,IAAI,CAAC;YACD,IAAI,GAAG,cAAM,CAAC,WAAW,CAAM,QAAQ,EAAE,SAAG,CAAC,CAAC;QAClD,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC;QAIvB,MAAM,CAAC,IAAI,OAAO,CAAM,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;YAC9C,MAAM,kBAAkB,GAAG,eAAe,GAAG,MAAM,CAAC;YACpD,+BAAiB,CAAC,eAAe,EAAE,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,YAAY,EAC7F,CAAC,GAAG,EAAE,EAAE;gBACJ,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC,EACD,GAAG,EAAE;gBACD,KAAK,CAAC,6BAA6B,CAAC,CAAC;gBAErC,UAAU,CAAC,GAAG,EAAE;oBACZ,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;oBAC/B,UAAU,CAAC,GAAG,EAAE;wBACZ,EAAE,CAAC,UAAU,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;wBACnD,OAAO,CAAC,eAAe,CAAC,CAAC;oBAC7B,CAAC,EAAE,GAAG,CAAC,CAAC;gBACZ,CAAC,EAAE,GAAG,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC;QACX,CAAC,CAAA,CAAC,CAAC;IACP,CAAC;CAAA;AAzCD,gDAyCC","sourcesContent":["import * as fs from \"fs\";\n\nimport { Publication } from \"@models/publication\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { injectBufferInZip } from \"@utils/zip/zipInjector\";\nimport * as debug_ from \"debug\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nconst debug = debug_(\"r2:electron:main:lsd\");\n\nexport async function lsdLcpUpdateInject(\n    lcplStr: string,\n    publication: Publication,\n    publicationPath: string): Promise<string> {\n\n    const lcplJson = global.JSON.parse(lcplStr);\n    debug(lcplJson);\n\n    const zipEntryPath = \"META-INF/license.lcpl\";\n\n    let lcpl: LCP;\n    try {\n        lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\n    } catch (erorz) {\n        return Promise.reject(erorz);\n    }\n    lcpl.ZipPath = zipEntryPath;\n    lcpl.JsonSource = lcplStr;\n    lcpl.init();\n    publication.LCP = lcpl;\n    // publication.AddLink(\"application/vnd.readium.lcp.license-1.0+json\", [\"license\"],\n    //     lcpl.ZipPath, false);\n\n    return new Promise<any>(async (resolve, reject) => {\n        const newPublicationPath = publicationPath + \".new\";\n        injectBufferInZip(publicationPath, newPublicationPath, Buffer.from(lcplStr, \"utf8\"), zipEntryPath,\n            (err) => {\n                reject(err);\n            },\n            () => {\n                debug(\"EPUB license.lcpl injected.\");\n\n                setTimeout(() => {\n                    fs.unlinkSync(publicationPath);\n                    setTimeout(() => {\n                        fs.renameSync(newPublicationPath, publicationPath);\n                        resolve(publicationPath);\n                    }, 500);\n                }, 500);\n            });\n    });\n}\n"]}